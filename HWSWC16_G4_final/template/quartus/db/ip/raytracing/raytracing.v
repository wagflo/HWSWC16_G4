// raytracing.v

// Generated using ACDS version 16.0 222

`timescale 1 ps / 1 ps
module raytracing (
		input  wire        altpll_0_areset_conduit_export, // altpll_0_areset_conduit.export
		output wire        altpll_0_locked_conduit_export, // altpll_0_locked_conduit.export
		output wire        altpll_c4_conduit_export,       //       altpll_c4_conduit.export
		input  wire        clk_clk,                        //                     clk.clk
		output wire [23:0] ltm_vid_data,                   //                     ltm.vid_data
		output wire        ltm_underflow,                  //                        .underflow
		output wire        ltm_vid_datavalid,              //                        .vid_datavalid
		output wire        ltm_vid_v_sync,                 //                        .vid_v_sync
		output wire        ltm_vid_h_sync,                 //                        .vid_h_sync
		output wire        ltm_vid_f,                      //                        .vid_f
		output wire        ltm_vid_h,                      //                        .vid_h
		output wire        ltm_vid_v,                      //                        .vid_v
		output wire        ltm_clk_clk,                    //                 ltm_clk.clk
		input  wire        reset_reset_n,                  //                   reset.reset_n
		output wire [12:0] sdram_addr,                     //                   sdram.addr
		output wire [1:0]  sdram_ba,                       //                        .ba
		output wire        sdram_cas_n,                    //                        .cas_n
		output wire        sdram_cke,                      //                        .cke
		output wire        sdram_cs_n,                     //                        .cs_n
		inout  wire [31:0] sdram_dq,                       //                        .dq
		output wire [3:0]  sdram_dqm,                      //                        .dqm
		output wire        sdram_ras_n,                    //                        .ras_n
		output wire        sdram_we_n,                     //                        .we_n
		output wire        sdram_clk_clk                   //               sdram_clk.clk
	);

	wire         framereader_avalon_streaming_source_valid;                 // framereader:dout_valid -> ltm:is_valid
	wire  [23:0] framereader_avalon_streaming_source_data;                  // framereader:dout_data -> ltm:is_data
	wire         framereader_avalon_streaming_source_ready;                 // ltm:is_ready -> framereader:dout_ready
	wire         framereader_avalon_streaming_source_startofpacket;         // framereader:dout_startofpacket -> ltm:is_sop
	wire         framereader_avalon_streaming_source_endofpacket;           // framereader:dout_endofpacket -> ltm:is_eop
	wire         altpll_c0_clk;                                             // altpll:c0 -> [framereader:master_clock, irq_mapper:clk, irq_synchronizer:sender_clk, jtag_uart:clk, mm_interconnect_0:altpll_c0_clk, nios2:clk, onchip_ram:clk, rst_controller_002:clk, rst_controller_004:clk, sdram:clk, systimer:clk]
	wire         altpll_c3_clk;                                             // altpll:c3 -> [mm_interconnect_0:altpll_c3_clk, mm_raytracing_0:clk, rst_controller_003:clk]
	wire  [31:0] framereader_avalon_master_readdata;                        // mm_interconnect_0:framereader_avalon_master_readdata -> framereader:master_readdata
	wire         framereader_avalon_master_waitrequest;                     // mm_interconnect_0:framereader_avalon_master_waitrequest -> framereader:master_waitrequest
	wire  [31:0] framereader_avalon_master_address;                         // framereader:master_address -> mm_interconnect_0:framereader_avalon_master_address
	wire         framereader_avalon_master_read;                            // framereader:master_read -> mm_interconnect_0:framereader_avalon_master_read
	wire         framereader_avalon_master_readdatavalid;                   // mm_interconnect_0:framereader_avalon_master_readdatavalid -> framereader:master_readdatavalid
	wire   [5:0] framereader_avalon_master_burstcount;                      // framereader:master_burstcount -> mm_interconnect_0:framereader_avalon_master_burstcount
	wire  [31:0] nios2_data_master_readdata;                                // mm_interconnect_0:nios2_data_master_readdata -> nios2:d_readdata
	wire         nios2_data_master_waitrequest;                             // mm_interconnect_0:nios2_data_master_waitrequest -> nios2:d_waitrequest
	wire         nios2_data_master_debugaccess;                             // nios2:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:nios2_data_master_debugaccess
	wire  [27:0] nios2_data_master_address;                                 // nios2:d_address -> mm_interconnect_0:nios2_data_master_address
	wire   [3:0] nios2_data_master_byteenable;                              // nios2:d_byteenable -> mm_interconnect_0:nios2_data_master_byteenable
	wire         nios2_data_master_read;                                    // nios2:d_read -> mm_interconnect_0:nios2_data_master_read
	wire         nios2_data_master_readdatavalid;                           // mm_interconnect_0:nios2_data_master_readdatavalid -> nios2:d_readdatavalid
	wire         nios2_data_master_write;                                   // nios2:d_write -> mm_interconnect_0:nios2_data_master_write
	wire  [31:0] nios2_data_master_writedata;                               // nios2:d_writedata -> mm_interconnect_0:nios2_data_master_writedata
	wire         mm_raytracing_0_mm_sdram_master_waitrequest;               // mm_interconnect_0:mm_raytracing_0_mm_sdram_master_waitrequest -> mm_raytracing_0:slave_waitreq
	wire  [31:0] mm_raytracing_0_mm_sdram_master_address;                   // mm_raytracing_0:master_address -> mm_interconnect_0:mm_raytracing_0_mm_sdram_master_address
	wire         mm_raytracing_0_mm_sdram_master_write;                     // mm_raytracing_0:master_write -> mm_interconnect_0:mm_raytracing_0_mm_sdram_master_write
	wire  [31:0] mm_raytracing_0_mm_sdram_master_writedata;                 // mm_raytracing_0:master_colordata -> mm_interconnect_0:mm_raytracing_0_mm_sdram_master_writedata
	wire  [31:0] nios2_instruction_master_readdata;                         // mm_interconnect_0:nios2_instruction_master_readdata -> nios2:i_readdata
	wire         nios2_instruction_master_waitrequest;                      // mm_interconnect_0:nios2_instruction_master_waitrequest -> nios2:i_waitrequest
	wire  [26:0] nios2_instruction_master_address;                          // nios2:i_address -> mm_interconnect_0:nios2_instruction_master_address
	wire         nios2_instruction_master_read;                             // nios2:i_read -> mm_interconnect_0:nios2_instruction_master_read
	wire         nios2_instruction_master_readdatavalid;                    // mm_interconnect_0:nios2_instruction_master_readdatavalid -> nios2:i_readdatavalid
	wire         mm_interconnect_0_sdram_s1_chipselect;                     // mm_interconnect_0:sdram_s1_chipselect -> sdram:az_cs
	wire  [31:0] mm_interconnect_0_sdram_s1_readdata;                       // sdram:za_data -> mm_interconnect_0:sdram_s1_readdata
	wire         mm_interconnect_0_sdram_s1_waitrequest;                    // sdram:za_waitrequest -> mm_interconnect_0:sdram_s1_waitrequest
	wire  [24:0] mm_interconnect_0_sdram_s1_address;                        // mm_interconnect_0:sdram_s1_address -> sdram:az_addr
	wire         mm_interconnect_0_sdram_s1_read;                           // mm_interconnect_0:sdram_s1_read -> sdram:az_rd_n
	wire   [3:0] mm_interconnect_0_sdram_s1_byteenable;                     // mm_interconnect_0:sdram_s1_byteenable -> sdram:az_be_n
	wire         mm_interconnect_0_sdram_s1_readdatavalid;                  // sdram:za_valid -> mm_interconnect_0:sdram_s1_readdatavalid
	wire         mm_interconnect_0_sdram_s1_write;                          // mm_interconnect_0:sdram_s1_write -> sdram:az_wr_n
	wire  [31:0] mm_interconnect_0_sdram_s1_writedata;                      // mm_interconnect_0:sdram_s1_writedata -> sdram:az_data
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;  // mm_interconnect_0:jtag_uart_avalon_jtag_slave_chipselect -> jtag_uart:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;    // jtag_uart:av_readdata -> mm_interconnect_0:jtag_uart_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest; // jtag_uart:av_waitrequest -> mm_interconnect_0:jtag_uart_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;     // mm_interconnect_0:jtag_uart_avalon_jtag_slave_address -> jtag_uart:av_address
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;        // mm_interconnect_0:jtag_uart_avalon_jtag_slave_read -> jtag_uart:av_read_n
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;       // mm_interconnect_0:jtag_uart_avalon_jtag_slave_write -> jtag_uart:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;   // mm_interconnect_0:jtag_uart_avalon_jtag_slave_writedata -> jtag_uart:av_writedata
	wire  [31:0] mm_interconnect_0_framereader_avalon_slave_readdata;       // framereader:slave_readdata -> mm_interconnect_0:framereader_avalon_slave_readdata
	wire   [4:0] mm_interconnect_0_framereader_avalon_slave_address;        // mm_interconnect_0:framereader_avalon_slave_address -> framereader:slave_address
	wire         mm_interconnect_0_framereader_avalon_slave_read;           // mm_interconnect_0:framereader_avalon_slave_read -> framereader:slave_read
	wire         mm_interconnect_0_framereader_avalon_slave_write;          // mm_interconnect_0:framereader_avalon_slave_write -> framereader:slave_write
	wire  [31:0] mm_interconnect_0_framereader_avalon_slave_writedata;      // mm_interconnect_0:framereader_avalon_slave_writedata -> framereader:slave_writedata
	wire  [31:0] mm_interconnect_0_nios2_debug_mem_slave_readdata;          // nios2:debug_mem_slave_readdata -> mm_interconnect_0:nios2_debug_mem_slave_readdata
	wire         mm_interconnect_0_nios2_debug_mem_slave_waitrequest;       // nios2:debug_mem_slave_waitrequest -> mm_interconnect_0:nios2_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_nios2_debug_mem_slave_debugaccess;       // mm_interconnect_0:nios2_debug_mem_slave_debugaccess -> nios2:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_nios2_debug_mem_slave_address;           // mm_interconnect_0:nios2_debug_mem_slave_address -> nios2:debug_mem_slave_address
	wire         mm_interconnect_0_nios2_debug_mem_slave_read;              // mm_interconnect_0:nios2_debug_mem_slave_read -> nios2:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_nios2_debug_mem_slave_byteenable;        // mm_interconnect_0:nios2_debug_mem_slave_byteenable -> nios2:debug_mem_slave_byteenable
	wire         mm_interconnect_0_nios2_debug_mem_slave_write;             // mm_interconnect_0:nios2_debug_mem_slave_write -> nios2:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_nios2_debug_mem_slave_writedata;         // mm_interconnect_0:nios2_debug_mem_slave_writedata -> nios2:debug_mem_slave_writedata
	wire  [15:0] mm_interconnect_0_mm_raytracing_0_mm_nios_slave_address;   // mm_interconnect_0:mm_raytracing_0_mm_nios_slave_address -> mm_raytracing_0:address
	wire         mm_interconnect_0_mm_raytracing_0_mm_nios_slave_write;     // mm_interconnect_0:mm_raytracing_0_mm_nios_slave_write -> mm_raytracing_0:write
	wire  [31:0] mm_interconnect_0_mm_raytracing_0_mm_nios_slave_writedata; // mm_interconnect_0:mm_raytracing_0_mm_nios_slave_writedata -> mm_raytracing_0:writedata
	wire  [31:0] mm_interconnect_0_altpll_pll_slave_readdata;               // altpll:readdata -> mm_interconnect_0:altpll_pll_slave_readdata
	wire   [1:0] mm_interconnect_0_altpll_pll_slave_address;                // mm_interconnect_0:altpll_pll_slave_address -> altpll:address
	wire         mm_interconnect_0_altpll_pll_slave_read;                   // mm_interconnect_0:altpll_pll_slave_read -> altpll:read
	wire         mm_interconnect_0_altpll_pll_slave_write;                  // mm_interconnect_0:altpll_pll_slave_write -> altpll:write
	wire  [31:0] mm_interconnect_0_altpll_pll_slave_writedata;              // mm_interconnect_0:altpll_pll_slave_writedata -> altpll:writedata
	wire         mm_interconnect_0_systimer_s1_chipselect;                  // mm_interconnect_0:systimer_s1_chipselect -> systimer:chipselect
	wire  [15:0] mm_interconnect_0_systimer_s1_readdata;                    // systimer:readdata -> mm_interconnect_0:systimer_s1_readdata
	wire   [3:0] mm_interconnect_0_systimer_s1_address;                     // mm_interconnect_0:systimer_s1_address -> systimer:address
	wire         mm_interconnect_0_systimer_s1_write;                       // mm_interconnect_0:systimer_s1_write -> systimer:write_n
	wire  [15:0] mm_interconnect_0_systimer_s1_writedata;                   // mm_interconnect_0:systimer_s1_writedata -> systimer:writedata
	wire         mm_interconnect_0_onchip_ram_s1_chipselect;                // mm_interconnect_0:onchip_ram_s1_chipselect -> onchip_ram:chipselect
	wire  [31:0] mm_interconnect_0_onchip_ram_s1_readdata;                  // onchip_ram:readdata -> mm_interconnect_0:onchip_ram_s1_readdata
	wire  [15:0] mm_interconnect_0_onchip_ram_s1_address;                   // mm_interconnect_0:onchip_ram_s1_address -> onchip_ram:address
	wire   [3:0] mm_interconnect_0_onchip_ram_s1_byteenable;                // mm_interconnect_0:onchip_ram_s1_byteenable -> onchip_ram:byteenable
	wire         mm_interconnect_0_onchip_ram_s1_write;                     // mm_interconnect_0:onchip_ram_s1_write -> onchip_ram:write
	wire  [31:0] mm_interconnect_0_onchip_ram_s1_writedata;                 // mm_interconnect_0:onchip_ram_s1_writedata -> onchip_ram:writedata
	wire         mm_interconnect_0_onchip_ram_s1_clken;                     // mm_interconnect_0:onchip_ram_s1_clken -> onchip_ram:clken
	wire         irq_mapper_receiver1_irq;                                  // jtag_uart:av_irq -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                                  // systimer:irq -> irq_mapper:receiver2_irq
	wire  [31:0] nios2_irq_irq;                                             // irq_mapper:sender_irq -> nios2:irq
	wire         irq_mapper_receiver0_irq;                                  // irq_synchronizer:sender_irq -> irq_mapper:receiver0_irq
	wire   [0:0] irq_synchronizer_receiver_irq;                             // framereader:slave_irq -> irq_synchronizer:receiver_irq
	wire         rst_controller_reset_out_reset;                            // rst_controller:reset_out -> [altpll:reset, mm_interconnect_0:altpll_inclk_interface_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset;                        // rst_controller_001:reset_out -> [framereader:reset, irq_synchronizer:receiver_reset, ltm:rst, mm_interconnect_0:framereader_clock_reset_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_002_reset_out_reset;                        // rst_controller_002:reset_out -> [framereader:master_reset, jtag_uart:rst_n, mm_interconnect_0:framereader_clock_master_reset_reset_bridge_in_reset_reset, onchip_ram:reset, rst_translator:in_reset, sdram:reset_n, systimer:reset_n]
	wire         rst_controller_002_reset_out_reset_req;                    // rst_controller_002:reset_req -> [onchip_ram:reset_req, rst_translator:reset_req_in]
	wire         rst_controller_003_reset_out_reset;                        // rst_controller_003:reset_out -> [mm_interconnect_0:mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset, mm_raytracing_0:res_n]
	wire         rst_controller_004_reset_out_reset;                        // rst_controller_004:reset_out -> [irq_mapper:reset, irq_synchronizer:sender_reset, mm_interconnect_0:nios2_reset_reset_bridge_in_reset_reset, nios2:reset_n, rst_translator_001:in_reset]
	wire         rst_controller_004_reset_out_reset_req;                    // rst_controller_004:reset_req -> [nios2:reset_req, rst_translator_001:reset_req_in]
	wire         nios2_debug_reset_request_reset;                           // nios2:debug_reset_request -> rst_controller_004:reset_in1

	raytracing_altpll altpll (
		.clk                (clk_clk),                                      //       inclk_interface.clk
		.reset              (rst_controller_reset_out_reset),               // inclk_interface_reset.reset
		.read               (mm_interconnect_0_altpll_pll_slave_read),      //             pll_slave.read
		.write              (mm_interconnect_0_altpll_pll_slave_write),     //                      .write
		.address            (mm_interconnect_0_altpll_pll_slave_address),   //                      .address
		.readdata           (mm_interconnect_0_altpll_pll_slave_readdata),  //                      .readdata
		.writedata          (mm_interconnect_0_altpll_pll_slave_writedata), //                      .writedata
		.c0                 (altpll_c0_clk),                                //                    c0.clk
		.c1                 (ltm_clk_clk),                                  //                    c1.clk
		.c2                 (sdram_clk_clk),                                //                    c2.clk
		.c3                 (altpll_c3_clk),                                //                    c3.clk
		.areset             (altpll_0_areset_conduit_export),               //        areset_conduit.export
		.locked             (altpll_0_locked_conduit_export),               //        locked_conduit.export
		.c4                 (altpll_c4_conduit_export),                     //            c4_conduit.export
		.scandone           (),                                             //           (terminated)
		.scandataout        (),                                             //           (terminated)
		.phasedone          (),                                             //           (terminated)
		.phasecounterselect (4'b0000),                                      //           (terminated)
		.phaseupdown        (1'b0),                                         //           (terminated)
		.phasestep          (1'b0),                                         //           (terminated)
		.scanclk            (1'b0),                                         //           (terminated)
		.scanclkena         (1'b0),                                         //           (terminated)
		.scandata           (1'b0),                                         //           (terminated)
		.configupdate       (1'b0)                                          //           (terminated)
	);

	alt_vipvfr131_vfr #(
		.BITS_PER_PIXEL_PER_COLOR_PLANE (8),
		.NUMBER_OF_CHANNELS_IN_PARALLEL (3),
		.NUMBER_OF_CHANNELS_IN_SEQUENCE (1),
		.MAX_IMAGE_WIDTH                (800),
		.MAX_IMAGE_HEIGHT               (480),
		.MEM_PORT_WIDTH                 (32),
		.RMASTER_FIFO_DEPTH             (64),
		.RMASTER_BURST_TARGET           (32),
		.CLOCKS_ARE_SEPARATE            (1)
	) framereader (
		.clock                (ltm_clk_clk),                                          //             clock_reset.clk
		.reset                (rst_controller_001_reset_out_reset),                   //       clock_reset_reset.reset
		.master_clock         (altpll_c0_clk),                                        //            clock_master.clk
		.master_reset         (rst_controller_002_reset_out_reset),                   //      clock_master_reset.reset
		.slave_address        (mm_interconnect_0_framereader_avalon_slave_address),   //            avalon_slave.address
		.slave_write          (mm_interconnect_0_framereader_avalon_slave_write),     //                        .write
		.slave_writedata      (mm_interconnect_0_framereader_avalon_slave_writedata), //                        .writedata
		.slave_read           (mm_interconnect_0_framereader_avalon_slave_read),      //                        .read
		.slave_readdata       (mm_interconnect_0_framereader_avalon_slave_readdata),  //                        .readdata
		.slave_irq            (irq_synchronizer_receiver_irq),                        //        interrupt_sender.irq
		.dout_data            (framereader_avalon_streaming_source_data),             // avalon_streaming_source.data
		.dout_valid           (framereader_avalon_streaming_source_valid),            //                        .valid
		.dout_ready           (framereader_avalon_streaming_source_ready),            //                        .ready
		.dout_startofpacket   (framereader_avalon_streaming_source_startofpacket),    //                        .startofpacket
		.dout_endofpacket     (framereader_avalon_streaming_source_endofpacket),      //                        .endofpacket
		.master_address       (framereader_avalon_master_address),                    //           avalon_master.address
		.master_burstcount    (framereader_avalon_master_burstcount),                 //                        .burstcount
		.master_readdata      (framereader_avalon_master_readdata),                   //                        .readdata
		.master_read          (framereader_avalon_master_read),                       //                        .read
		.master_readdatavalid (framereader_avalon_master_readdatavalid),              //                        .readdatavalid
		.master_waitrequest   (framereader_avalon_master_waitrequest)                 //                        .waitrequest
	);

	raytracing_jtag_uart jtag_uart (
		.clk            (altpll_c0_clk),                                             //               clk.clk
		.rst_n          (~rst_controller_002_reset_out_reset),                       //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver1_irq)                                   //               irq.irq
	);

	alt_vipitc131_IS2Vid #(
		.NUMBER_OF_COLOUR_PLANES       (3),
		.COLOUR_PLANES_ARE_IN_PARALLEL (1),
		.BPS                           (8),
		.INTERLACED                    (0),
		.H_ACTIVE_PIXELS               (800),
		.V_ACTIVE_LINES                (480),
		.ACCEPT_COLOURS_IN_SEQ         (0),
		.FIFO_DEPTH                    (1024),
		.CLOCKS_ARE_SAME               (1),
		.USE_CONTROL                   (0),
		.NO_OF_MODES                   (1),
		.THRESHOLD                     (1023),
		.STD_WIDTH                     (1),
		.GENERATE_SYNC                 (0),
		.USE_EMBEDDED_SYNCS            (0),
		.AP_LINE                       (0),
		.V_BLANK                       (0),
		.H_BLANK                       (0),
		.H_SYNC_LENGTH                 (1),
		.H_FRONT_PORCH                 (40),
		.H_BACK_PORCH                  (216),
		.V_SYNC_LENGTH                 (1),
		.V_FRONT_PORCH                 (10),
		.V_BACK_PORCH                  (35),
		.F_RISING_EDGE                 (0),
		.F_FALLING_EDGE                (0),
		.FIELD0_V_RISING_EDGE          (0),
		.FIELD0_V_BLANK                (0),
		.FIELD0_V_SYNC_LENGTH          (0),
		.FIELD0_V_FRONT_PORCH          (0),
		.FIELD0_V_BACK_PORCH           (0),
		.ANC_LINE                      (0),
		.FIELD0_ANC_LINE               (0)
	) ltm (
		.is_clk        (ltm_clk_clk),                                       //       is_clk_rst.clk
		.rst           (rst_controller_001_reset_out_reset),                // is_clk_rst_reset.reset
		.is_data       (framereader_avalon_streaming_source_data),          //              din.data
		.is_valid      (framereader_avalon_streaming_source_valid),         //                 .valid
		.is_ready      (framereader_avalon_streaming_source_ready),         //                 .ready
		.is_sop        (framereader_avalon_streaming_source_startofpacket), //                 .startofpacket
		.is_eop        (framereader_avalon_streaming_source_endofpacket),   //                 .endofpacket
		.vid_data      (ltm_vid_data),                                      //    clocked_video.export
		.underflow     (ltm_underflow),                                     //                 .export
		.vid_datavalid (ltm_vid_datavalid),                                 //                 .export
		.vid_v_sync    (ltm_vid_v_sync),                                    //                 .export
		.vid_h_sync    (ltm_vid_h_sync),                                    //                 .export
		.vid_f         (ltm_vid_f),                                         //                 .export
		.vid_h         (ltm_vid_h),                                         //                 .export
		.vid_v         (ltm_vid_v)                                          //                 .export
	);

	raytracing_mm mm_raytracing_0 (
		.clk              (altpll_c3_clk),                                             //      clock_sink.clk
		.res_n            (rst_controller_003_reset_out_reset),                        //      reset_sink.reset
		.address          (mm_interconnect_0_mm_raytracing_0_mm_nios_slave_address),   //   mm_nios_slave.address
		.write            (mm_interconnect_0_mm_raytracing_0_mm_nios_slave_write),     //                .write
		.writedata        (mm_interconnect_0_mm_raytracing_0_mm_nios_slave_writedata), //                .writedata
		.master_address   (mm_raytracing_0_mm_sdram_master_address),                   // mm_sdram_master.address
		.master_write     (mm_raytracing_0_mm_sdram_master_write),                     //                .write
		.master_colordata (mm_raytracing_0_mm_sdram_master_writedata),                 //                .writedata
		.slave_waitreq    (mm_raytracing_0_mm_sdram_master_waitrequest)                //                .waitrequest
	);

	raytracing_nios2 nios2 (
		.clk                                 (altpll_c0_clk),                                       //                       clk.clk
		.reset_n                             (~rst_controller_004_reset_out_reset),                 //                     reset.reset_n
		.reset_req                           (rst_controller_004_reset_out_reset_req),              //                          .reset_req
		.d_address                           (nios2_data_master_address),                           //               data_master.address
		.d_byteenable                        (nios2_data_master_byteenable),                        //                          .byteenable
		.d_read                              (nios2_data_master_read),                              //                          .read
		.d_readdata                          (nios2_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (nios2_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (nios2_data_master_write),                             //                          .write
		.d_writedata                         (nios2_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (nios2_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (nios2_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (nios2_instruction_master_address),                    //        instruction_master.address
		.i_read                              (nios2_instruction_master_read),                       //                          .read
		.i_readdata                          (nios2_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (nios2_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (nios2_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (nios2_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (nios2_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_nios2_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_nios2_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_nios2_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_nios2_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_nios2_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_nios2_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_nios2_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_nios2_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                     // custom_instruction_master.readra
	);

	raytracing_onchip_ram onchip_ram (
		.clk        (altpll_c0_clk),                              //   clk1.clk
		.address    (mm_interconnect_0_onchip_ram_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_ram_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_ram_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_ram_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_ram_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_ram_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_ram_s1_byteenable), //       .byteenable
		.reset      (rst_controller_002_reset_out_reset),         // reset1.reset
		.reset_req  (rst_controller_002_reset_out_reset_req)      //       .reset_req
	);

	raytracing_sdram sdram (
		.clk            (altpll_c0_clk),                            //   clk.clk
		.reset_n        (~rst_controller_002_reset_out_reset),      // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_addr),                               //  wire.export
		.zs_ba          (sdram_ba),                                 //      .export
		.zs_cas_n       (sdram_cas_n),                              //      .export
		.zs_cke         (sdram_cke),                                //      .export
		.zs_cs_n        (sdram_cs_n),                               //      .export
		.zs_dq          (sdram_dq),                                 //      .export
		.zs_dqm         (sdram_dqm),                                //      .export
		.zs_ras_n       (sdram_ras_n),                              //      .export
		.zs_we_n        (sdram_we_n)                                //      .export
	);

	raytracing_systimer systimer (
		.clk        (altpll_c0_clk),                            //   clk.clk
		.reset_n    (~rst_controller_002_reset_out_reset),      // reset.reset_n
		.address    (mm_interconnect_0_systimer_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_systimer_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_systimer_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_systimer_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_systimer_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver2_irq)                  //   irq.irq
	);

	raytracing_mm_interconnect_0 mm_interconnect_0 (
		.altpll_c0_clk                                              (altpll_c0_clk),                                             //                                            altpll_c0.clk
		.altpll_c1_clk                                              (ltm_clk_clk),                                               //                                            altpll_c1.clk
		.altpll_c3_clk                                              (altpll_c3_clk),                                             //                                            altpll_c3.clk
		.clk_50_clk_clk                                             (clk_clk),                                                   //                                           clk_50_clk.clk
		.altpll_inclk_interface_reset_reset_bridge_in_reset_reset   (rst_controller_reset_out_reset),                            //   altpll_inclk_interface_reset_reset_bridge_in_reset.reset
		.framereader_clock_master_reset_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),                        // framereader_clock_master_reset_reset_bridge_in_reset.reset
		.framereader_clock_reset_reset_reset_bridge_in_reset_reset  (rst_controller_001_reset_out_reset),                        //  framereader_clock_reset_reset_reset_bridge_in_reset.reset
		.mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset     (rst_controller_003_reset_out_reset),                        //     mm_raytracing_0_reset_sink_reset_bridge_in_reset.reset
		.nios2_reset_reset_bridge_in_reset_reset                    (rst_controller_004_reset_out_reset),                        //                    nios2_reset_reset_bridge_in_reset.reset
		.framereader_avalon_master_address                          (framereader_avalon_master_address),                         //                            framereader_avalon_master.address
		.framereader_avalon_master_waitrequest                      (framereader_avalon_master_waitrequest),                     //                                                     .waitrequest
		.framereader_avalon_master_burstcount                       (framereader_avalon_master_burstcount),                      //                                                     .burstcount
		.framereader_avalon_master_read                             (framereader_avalon_master_read),                            //                                                     .read
		.framereader_avalon_master_readdata                         (framereader_avalon_master_readdata),                        //                                                     .readdata
		.framereader_avalon_master_readdatavalid                    (framereader_avalon_master_readdatavalid),                   //                                                     .readdatavalid
		.mm_raytracing_0_mm_sdram_master_address                    (mm_raytracing_0_mm_sdram_master_address),                   //                      mm_raytracing_0_mm_sdram_master.address
		.mm_raytracing_0_mm_sdram_master_waitrequest                (mm_raytracing_0_mm_sdram_master_waitrequest),               //                                                     .waitrequest
		.mm_raytracing_0_mm_sdram_master_write                      (mm_raytracing_0_mm_sdram_master_write),                     //                                                     .write
		.mm_raytracing_0_mm_sdram_master_writedata                  (mm_raytracing_0_mm_sdram_master_writedata),                 //                                                     .writedata
		.nios2_data_master_address                                  (nios2_data_master_address),                                 //                                    nios2_data_master.address
		.nios2_data_master_waitrequest                              (nios2_data_master_waitrequest),                             //                                                     .waitrequest
		.nios2_data_master_byteenable                               (nios2_data_master_byteenable),                              //                                                     .byteenable
		.nios2_data_master_read                                     (nios2_data_master_read),                                    //                                                     .read
		.nios2_data_master_readdata                                 (nios2_data_master_readdata),                                //                                                     .readdata
		.nios2_data_master_readdatavalid                            (nios2_data_master_readdatavalid),                           //                                                     .readdatavalid
		.nios2_data_master_write                                    (nios2_data_master_write),                                   //                                                     .write
		.nios2_data_master_writedata                                (nios2_data_master_writedata),                               //                                                     .writedata
		.nios2_data_master_debugaccess                              (nios2_data_master_debugaccess),                             //                                                     .debugaccess
		.nios2_instruction_master_address                           (nios2_instruction_master_address),                          //                             nios2_instruction_master.address
		.nios2_instruction_master_waitrequest                       (nios2_instruction_master_waitrequest),                      //                                                     .waitrequest
		.nios2_instruction_master_read                              (nios2_instruction_master_read),                             //                                                     .read
		.nios2_instruction_master_readdata                          (nios2_instruction_master_readdata),                         //                                                     .readdata
		.nios2_instruction_master_readdatavalid                     (nios2_instruction_master_readdatavalid),                    //                                                     .readdatavalid
		.altpll_pll_slave_address                                   (mm_interconnect_0_altpll_pll_slave_address),                //                                     altpll_pll_slave.address
		.altpll_pll_slave_write                                     (mm_interconnect_0_altpll_pll_slave_write),                  //                                                     .write
		.altpll_pll_slave_read                                      (mm_interconnect_0_altpll_pll_slave_read),                   //                                                     .read
		.altpll_pll_slave_readdata                                  (mm_interconnect_0_altpll_pll_slave_readdata),               //                                                     .readdata
		.altpll_pll_slave_writedata                                 (mm_interconnect_0_altpll_pll_slave_writedata),              //                                                     .writedata
		.framereader_avalon_slave_address                           (mm_interconnect_0_framereader_avalon_slave_address),        //                             framereader_avalon_slave.address
		.framereader_avalon_slave_write                             (mm_interconnect_0_framereader_avalon_slave_write),          //                                                     .write
		.framereader_avalon_slave_read                              (mm_interconnect_0_framereader_avalon_slave_read),           //                                                     .read
		.framereader_avalon_slave_readdata                          (mm_interconnect_0_framereader_avalon_slave_readdata),       //                                                     .readdata
		.framereader_avalon_slave_writedata                         (mm_interconnect_0_framereader_avalon_slave_writedata),      //                                                     .writedata
		.jtag_uart_avalon_jtag_slave_address                        (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //                          jtag_uart_avalon_jtag_slave.address
		.jtag_uart_avalon_jtag_slave_write                          (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),       //                                                     .write
		.jtag_uart_avalon_jtag_slave_read                           (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),        //                                                     .read
		.jtag_uart_avalon_jtag_slave_readdata                       (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                                                     .readdata
		.jtag_uart_avalon_jtag_slave_writedata                      (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                                                     .writedata
		.jtag_uart_avalon_jtag_slave_waitrequest                    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                                                     .waitrequest
		.jtag_uart_avalon_jtag_slave_chipselect                     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  //                                                     .chipselect
		.mm_raytracing_0_mm_nios_slave_address                      (mm_interconnect_0_mm_raytracing_0_mm_nios_slave_address),   //                        mm_raytracing_0_mm_nios_slave.address
		.mm_raytracing_0_mm_nios_slave_write                        (mm_interconnect_0_mm_raytracing_0_mm_nios_slave_write),     //                                                     .write
		.mm_raytracing_0_mm_nios_slave_writedata                    (mm_interconnect_0_mm_raytracing_0_mm_nios_slave_writedata), //                                                     .writedata
		.nios2_debug_mem_slave_address                              (mm_interconnect_0_nios2_debug_mem_slave_address),           //                                nios2_debug_mem_slave.address
		.nios2_debug_mem_slave_write                                (mm_interconnect_0_nios2_debug_mem_slave_write),             //                                                     .write
		.nios2_debug_mem_slave_read                                 (mm_interconnect_0_nios2_debug_mem_slave_read),              //                                                     .read
		.nios2_debug_mem_slave_readdata                             (mm_interconnect_0_nios2_debug_mem_slave_readdata),          //                                                     .readdata
		.nios2_debug_mem_slave_writedata                            (mm_interconnect_0_nios2_debug_mem_slave_writedata),         //                                                     .writedata
		.nios2_debug_mem_slave_byteenable                           (mm_interconnect_0_nios2_debug_mem_slave_byteenable),        //                                                     .byteenable
		.nios2_debug_mem_slave_waitrequest                          (mm_interconnect_0_nios2_debug_mem_slave_waitrequest),       //                                                     .waitrequest
		.nios2_debug_mem_slave_debugaccess                          (mm_interconnect_0_nios2_debug_mem_slave_debugaccess),       //                                                     .debugaccess
		.onchip_ram_s1_address                                      (mm_interconnect_0_onchip_ram_s1_address),                   //                                        onchip_ram_s1.address
		.onchip_ram_s1_write                                        (mm_interconnect_0_onchip_ram_s1_write),                     //                                                     .write
		.onchip_ram_s1_readdata                                     (mm_interconnect_0_onchip_ram_s1_readdata),                  //                                                     .readdata
		.onchip_ram_s1_writedata                                    (mm_interconnect_0_onchip_ram_s1_writedata),                 //                                                     .writedata
		.onchip_ram_s1_byteenable                                   (mm_interconnect_0_onchip_ram_s1_byteenable),                //                                                     .byteenable
		.onchip_ram_s1_chipselect                                   (mm_interconnect_0_onchip_ram_s1_chipselect),                //                                                     .chipselect
		.onchip_ram_s1_clken                                        (mm_interconnect_0_onchip_ram_s1_clken),                     //                                                     .clken
		.sdram_s1_address                                           (mm_interconnect_0_sdram_s1_address),                        //                                             sdram_s1.address
		.sdram_s1_write                                             (mm_interconnect_0_sdram_s1_write),                          //                                                     .write
		.sdram_s1_read                                              (mm_interconnect_0_sdram_s1_read),                           //                                                     .read
		.sdram_s1_readdata                                          (mm_interconnect_0_sdram_s1_readdata),                       //                                                     .readdata
		.sdram_s1_writedata                                         (mm_interconnect_0_sdram_s1_writedata),                      //                                                     .writedata
		.sdram_s1_byteenable                                        (mm_interconnect_0_sdram_s1_byteenable),                     //                                                     .byteenable
		.sdram_s1_readdatavalid                                     (mm_interconnect_0_sdram_s1_readdatavalid),                  //                                                     .readdatavalid
		.sdram_s1_waitrequest                                       (mm_interconnect_0_sdram_s1_waitrequest),                    //                                                     .waitrequest
		.sdram_s1_chipselect                                        (mm_interconnect_0_sdram_s1_chipselect),                     //                                                     .chipselect
		.systimer_s1_address                                        (mm_interconnect_0_systimer_s1_address),                     //                                          systimer_s1.address
		.systimer_s1_write                                          (mm_interconnect_0_systimer_s1_write),                       //                                                     .write
		.systimer_s1_readdata                                       (mm_interconnect_0_systimer_s1_readdata),                    //                                                     .readdata
		.systimer_s1_writedata                                      (mm_interconnect_0_systimer_s1_writedata),                   //                                                     .writedata
		.systimer_s1_chipselect                                     (mm_interconnect_0_systimer_s1_chipselect)                   //                                                     .chipselect
	);

	raytracing_irq_mapper irq_mapper (
		.clk           (altpll_c0_clk),                      //       clk.clk
		.reset         (rst_controller_004_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),           // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),           // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),           // receiver2.irq
		.sender_irq    (nios2_irq_irq)                       //    sender.irq
	);

	altera_irq_clock_crosser #(
		.IRQ_WIDTH (1)
	) irq_synchronizer (
		.receiver_clk   (ltm_clk_clk),                        //       receiver_clk.clk
		.sender_clk     (altpll_c0_clk),                      //         sender_clk.clk
		.receiver_reset (rst_controller_001_reset_out_reset), // receiver_clk_reset.reset
		.sender_reset   (rst_controller_004_reset_out_reset), //   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_receiver_irq),      //           receiver.irq
		.sender_irq     (irq_mapper_receiver0_irq)            //             sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (ltm_clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~reset_reset_n),                         // reset_in0.reset
		.clk            (altpll_c0_clk),                          //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_002_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_in1      (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (altpll_c3_clk),                      //       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_004 (
		.reset_in0      (~reset_reset_n),                         // reset_in0.reset
		.reset_in1      (nios2_debug_reset_request_reset),        // reset_in1.reset
		.clk            (altpll_c0_clk),                          //       clk.clk
		.reset_out      (rst_controller_004_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_004_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

endmodule
