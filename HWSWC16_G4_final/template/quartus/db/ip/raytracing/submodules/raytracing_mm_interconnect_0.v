// raytracing_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.0 222

`timescale 1 ps / 1 ps
module raytracing_mm_interconnect_0 (
		input  wire        altpll_c0_clk,                                              //                                            altpll_c0.clk
		input  wire        altpll_c1_clk,                                              //                                            altpll_c1.clk
		input  wire        altpll_c3_clk,                                              //                                            altpll_c3.clk
		input  wire        clk_50_clk_clk,                                             //                                           clk_50_clk.clk
		input  wire        altpll_inclk_interface_reset_reset_bridge_in_reset_reset,   //   altpll_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire        framereader_clock_master_reset_reset_bridge_in_reset_reset, // framereader_clock_master_reset_reset_bridge_in_reset.reset
		input  wire        framereader_clock_reset_reset_reset_bridge_in_reset_reset,  //  framereader_clock_reset_reset_reset_bridge_in_reset.reset
		input  wire        mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset,     //     mm_raytracing_0_reset_sink_reset_bridge_in_reset.reset
		input  wire        nios2_reset_reset_bridge_in_reset_reset,                    //                    nios2_reset_reset_bridge_in_reset.reset
		input  wire [31:0] framereader_avalon_master_address,                          //                            framereader_avalon_master.address
		output wire        framereader_avalon_master_waitrequest,                      //                                                     .waitrequest
		input  wire [5:0]  framereader_avalon_master_burstcount,                       //                                                     .burstcount
		input  wire        framereader_avalon_master_read,                             //                                                     .read
		output wire [31:0] framereader_avalon_master_readdata,                         //                                                     .readdata
		output wire        framereader_avalon_master_readdatavalid,                    //                                                     .readdatavalid
		input  wire [31:0] mm_raytracing_0_mm_sdram_master_address,                    //                      mm_raytracing_0_mm_sdram_master.address
		output wire        mm_raytracing_0_mm_sdram_master_waitrequest,                //                                                     .waitrequest
		input  wire        mm_raytracing_0_mm_sdram_master_write,                      //                                                     .write
		input  wire [31:0] mm_raytracing_0_mm_sdram_master_writedata,                  //                                                     .writedata
		input  wire [27:0] nios2_data_master_address,                                  //                                    nios2_data_master.address
		output wire        nios2_data_master_waitrequest,                              //                                                     .waitrequest
		input  wire [3:0]  nios2_data_master_byteenable,                               //                                                     .byteenable
		input  wire        nios2_data_master_read,                                     //                                                     .read
		output wire [31:0] nios2_data_master_readdata,                                 //                                                     .readdata
		output wire        nios2_data_master_readdatavalid,                            //                                                     .readdatavalid
		input  wire        nios2_data_master_write,                                    //                                                     .write
		input  wire [31:0] nios2_data_master_writedata,                                //                                                     .writedata
		input  wire        nios2_data_master_debugaccess,                              //                                                     .debugaccess
		input  wire [26:0] nios2_instruction_master_address,                           //                             nios2_instruction_master.address
		output wire        nios2_instruction_master_waitrequest,                       //                                                     .waitrequest
		input  wire        nios2_instruction_master_read,                              //                                                     .read
		output wire [31:0] nios2_instruction_master_readdata,                          //                                                     .readdata
		output wire        nios2_instruction_master_readdatavalid,                     //                                                     .readdatavalid
		output wire [1:0]  altpll_pll_slave_address,                                   //                                     altpll_pll_slave.address
		output wire        altpll_pll_slave_write,                                     //                                                     .write
		output wire        altpll_pll_slave_read,                                      //                                                     .read
		input  wire [31:0] altpll_pll_slave_readdata,                                  //                                                     .readdata
		output wire [31:0] altpll_pll_slave_writedata,                                 //                                                     .writedata
		output wire [4:0]  framereader_avalon_slave_address,                           //                             framereader_avalon_slave.address
		output wire        framereader_avalon_slave_write,                             //                                                     .write
		output wire        framereader_avalon_slave_read,                              //                                                     .read
		input  wire [31:0] framereader_avalon_slave_readdata,                          //                                                     .readdata
		output wire [31:0] framereader_avalon_slave_writedata,                         //                                                     .writedata
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                        //                          jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                          //                                                     .write
		output wire        jtag_uart_avalon_jtag_slave_read,                           //                                                     .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                       //                                                     .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                      //                                                     .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                    //                                                     .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                     //                                                     .chipselect
		output wire [15:0] mm_raytracing_0_mm_nios_slave_address,                      //                        mm_raytracing_0_mm_nios_slave.address
		output wire        mm_raytracing_0_mm_nios_slave_write,                        //                                                     .write
		output wire [31:0] mm_raytracing_0_mm_nios_slave_writedata,                    //                                                     .writedata
		output wire [8:0]  nios2_debug_mem_slave_address,                              //                                nios2_debug_mem_slave.address
		output wire        nios2_debug_mem_slave_write,                                //                                                     .write
		output wire        nios2_debug_mem_slave_read,                                 //                                                     .read
		input  wire [31:0] nios2_debug_mem_slave_readdata,                             //                                                     .readdata
		output wire [31:0] nios2_debug_mem_slave_writedata,                            //                                                     .writedata
		output wire [3:0]  nios2_debug_mem_slave_byteenable,                           //                                                     .byteenable
		input  wire        nios2_debug_mem_slave_waitrequest,                          //                                                     .waitrequest
		output wire        nios2_debug_mem_slave_debugaccess,                          //                                                     .debugaccess
		output wire [15:0] onchip_ram_s1_address,                                      //                                        onchip_ram_s1.address
		output wire        onchip_ram_s1_write,                                        //                                                     .write
		input  wire [31:0] onchip_ram_s1_readdata,                                     //                                                     .readdata
		output wire [31:0] onchip_ram_s1_writedata,                                    //                                                     .writedata
		output wire [3:0]  onchip_ram_s1_byteenable,                                   //                                                     .byteenable
		output wire        onchip_ram_s1_chipselect,                                   //                                                     .chipselect
		output wire        onchip_ram_s1_clken,                                        //                                                     .clken
		output wire [24:0] sdram_s1_address,                                           //                                             sdram_s1.address
		output wire        sdram_s1_write,                                             //                                                     .write
		output wire        sdram_s1_read,                                              //                                                     .read
		input  wire [31:0] sdram_s1_readdata,                                          //                                                     .readdata
		output wire [31:0] sdram_s1_writedata,                                         //                                                     .writedata
		output wire [3:0]  sdram_s1_byteenable,                                        //                                                     .byteenable
		input  wire        sdram_s1_readdatavalid,                                     //                                                     .readdatavalid
		input  wire        sdram_s1_waitrequest,                                       //                                                     .waitrequest
		output wire        sdram_s1_chipselect,                                        //                                                     .chipselect
		output wire [3:0]  systimer_s1_address,                                        //                                          systimer_s1.address
		output wire        systimer_s1_write,                                          //                                                     .write
		input  wire [15:0] systimer_s1_readdata,                                       //                                                     .readdata
		output wire [15:0] systimer_s1_writedata,                                      //                                                     .writedata
		output wire        systimer_s1_chipselect                                      //                                                     .chipselect
	);

	wire          framereader_avalon_master_translator_avalon_universal_master_0_waitrequest;         // framereader_avalon_master_agent:av_waitrequest -> framereader_avalon_master_translator:uav_waitrequest
	wire   [31:0] framereader_avalon_master_translator_avalon_universal_master_0_readdata;            // framereader_avalon_master_agent:av_readdata -> framereader_avalon_master_translator:uav_readdata
	wire          framereader_avalon_master_translator_avalon_universal_master_0_debugaccess;         // framereader_avalon_master_translator:uav_debugaccess -> framereader_avalon_master_agent:av_debugaccess
	wire   [31:0] framereader_avalon_master_translator_avalon_universal_master_0_address;             // framereader_avalon_master_translator:uav_address -> framereader_avalon_master_agent:av_address
	wire          framereader_avalon_master_translator_avalon_universal_master_0_read;                // framereader_avalon_master_translator:uav_read -> framereader_avalon_master_agent:av_read
	wire    [3:0] framereader_avalon_master_translator_avalon_universal_master_0_byteenable;          // framereader_avalon_master_translator:uav_byteenable -> framereader_avalon_master_agent:av_byteenable
	wire          framereader_avalon_master_translator_avalon_universal_master_0_readdatavalid;       // framereader_avalon_master_agent:av_readdatavalid -> framereader_avalon_master_translator:uav_readdatavalid
	wire          framereader_avalon_master_translator_avalon_universal_master_0_lock;                // framereader_avalon_master_translator:uav_lock -> framereader_avalon_master_agent:av_lock
	wire          framereader_avalon_master_translator_avalon_universal_master_0_write;               // framereader_avalon_master_translator:uav_write -> framereader_avalon_master_agent:av_write
	wire   [31:0] framereader_avalon_master_translator_avalon_universal_master_0_writedata;           // framereader_avalon_master_translator:uav_writedata -> framereader_avalon_master_agent:av_writedata
	wire    [7:0] framereader_avalon_master_translator_avalon_universal_master_0_burstcount;          // framereader_avalon_master_translator:uav_burstcount -> framereader_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> framereader_avalon_master_agent:rp_valid
	wire  [112:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> framereader_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // framereader_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [7:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> framereader_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> framereader_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> framereader_avalon_master_agent:rp_endofpacket
	wire          nios2_data_master_translator_avalon_universal_master_0_waitrequest;                 // nios2_data_master_agent:av_waitrequest -> nios2_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_readdata;                    // nios2_data_master_agent:av_readdata -> nios2_data_master_translator:uav_readdata
	wire          nios2_data_master_translator_avalon_universal_master_0_debugaccess;                 // nios2_data_master_translator:uav_debugaccess -> nios2_data_master_agent:av_debugaccess
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_address;                     // nios2_data_master_translator:uav_address -> nios2_data_master_agent:av_address
	wire          nios2_data_master_translator_avalon_universal_master_0_read;                        // nios2_data_master_translator:uav_read -> nios2_data_master_agent:av_read
	wire    [3:0] nios2_data_master_translator_avalon_universal_master_0_byteenable;                  // nios2_data_master_translator:uav_byteenable -> nios2_data_master_agent:av_byteenable
	wire          nios2_data_master_translator_avalon_universal_master_0_readdatavalid;               // nios2_data_master_agent:av_readdatavalid -> nios2_data_master_translator:uav_readdatavalid
	wire          nios2_data_master_translator_avalon_universal_master_0_lock;                        // nios2_data_master_translator:uav_lock -> nios2_data_master_agent:av_lock
	wire          nios2_data_master_translator_avalon_universal_master_0_write;                       // nios2_data_master_translator:uav_write -> nios2_data_master_agent:av_write
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_writedata;                   // nios2_data_master_translator:uav_writedata -> nios2_data_master_agent:av_writedata
	wire    [2:0] nios2_data_master_translator_avalon_universal_master_0_burstcount;                  // nios2_data_master_translator:uav_burstcount -> nios2_data_master_agent:av_burstcount
	wire          mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_waitrequest;   // mm_raytracing_0_mm_sdram_master_agent:av_waitrequest -> mm_raytracing_0_mm_sdram_master_translator:uav_waitrequest
	wire   [31:0] mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_readdata;      // mm_raytracing_0_mm_sdram_master_agent:av_readdata -> mm_raytracing_0_mm_sdram_master_translator:uav_readdata
	wire          mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_debugaccess;   // mm_raytracing_0_mm_sdram_master_translator:uav_debugaccess -> mm_raytracing_0_mm_sdram_master_agent:av_debugaccess
	wire   [31:0] mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_address;       // mm_raytracing_0_mm_sdram_master_translator:uav_address -> mm_raytracing_0_mm_sdram_master_agent:av_address
	wire          mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_read;          // mm_raytracing_0_mm_sdram_master_translator:uav_read -> mm_raytracing_0_mm_sdram_master_agent:av_read
	wire    [3:0] mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_byteenable;    // mm_raytracing_0_mm_sdram_master_translator:uav_byteenable -> mm_raytracing_0_mm_sdram_master_agent:av_byteenable
	wire          mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_readdatavalid; // mm_raytracing_0_mm_sdram_master_agent:av_readdatavalid -> mm_raytracing_0_mm_sdram_master_translator:uav_readdatavalid
	wire          mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_lock;          // mm_raytracing_0_mm_sdram_master_translator:uav_lock -> mm_raytracing_0_mm_sdram_master_agent:av_lock
	wire          mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_write;         // mm_raytracing_0_mm_sdram_master_translator:uav_write -> mm_raytracing_0_mm_sdram_master_agent:av_write
	wire   [31:0] mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_writedata;     // mm_raytracing_0_mm_sdram_master_translator:uav_writedata -> mm_raytracing_0_mm_sdram_master_agent:av_writedata
	wire    [2:0] mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_burstcount;    // mm_raytracing_0_mm_sdram_master_translator:uav_burstcount -> mm_raytracing_0_mm_sdram_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                              // rsp_mux_002:src_valid -> mm_raytracing_0_mm_sdram_master_agent:rp_valid
	wire  [112:0] rsp_mux_002_src_data;                                                               // rsp_mux_002:src_data -> mm_raytracing_0_mm_sdram_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                              // mm_raytracing_0_mm_sdram_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [7:0] rsp_mux_002_src_channel;                                                            // rsp_mux_002:src_channel -> mm_raytracing_0_mm_sdram_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                      // rsp_mux_002:src_startofpacket -> mm_raytracing_0_mm_sdram_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                        // rsp_mux_002:src_endofpacket -> mm_raytracing_0_mm_sdram_master_agent:rp_endofpacket
	wire          nios2_instruction_master_translator_avalon_universal_master_0_waitrequest;          // nios2_instruction_master_agent:av_waitrequest -> nios2_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_readdata;             // nios2_instruction_master_agent:av_readdata -> nios2_instruction_master_translator:uav_readdata
	wire          nios2_instruction_master_translator_avalon_universal_master_0_debugaccess;          // nios2_instruction_master_translator:uav_debugaccess -> nios2_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_address;              // nios2_instruction_master_translator:uav_address -> nios2_instruction_master_agent:av_address
	wire          nios2_instruction_master_translator_avalon_universal_master_0_read;                 // nios2_instruction_master_translator:uav_read -> nios2_instruction_master_agent:av_read
	wire    [3:0] nios2_instruction_master_translator_avalon_universal_master_0_byteenable;           // nios2_instruction_master_translator:uav_byteenable -> nios2_instruction_master_agent:av_byteenable
	wire          nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_instruction_master_agent:av_readdatavalid -> nios2_instruction_master_translator:uav_readdatavalid
	wire          nios2_instruction_master_translator_avalon_universal_master_0_lock;                 // nios2_instruction_master_translator:uav_lock -> nios2_instruction_master_agent:av_lock
	wire          nios2_instruction_master_translator_avalon_universal_master_0_write;                // nios2_instruction_master_translator:uav_write -> nios2_instruction_master_agent:av_write
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_writedata;            // nios2_instruction_master_translator:uav_writedata -> nios2_instruction_master_agent:av_writedata
	wire    [2:0] nios2_instruction_master_translator_avalon_universal_master_0_burstcount;           // nios2_instruction_master_translator:uav_burstcount -> nios2_instruction_master_agent:av_burstcount
	wire   [31:0] sdram_s1_agent_m0_readdata;                                                         // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                      // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                      // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                          // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [3:0] sdram_s1_agent_m0_byteenable;                                                       // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                             // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                    // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                             // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [31:0] sdram_s1_agent_m0_writedata;                                                        // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                            // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [2:0] sdram_s1_agent_m0_burstcount;                                                       // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                     // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire  [113:0] sdram_s1_agent_rf_source_data;                                                      // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                     // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                             // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                               // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                  // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire  [113:0] sdram_s1_agent_rsp_fifo_out_data;                                                   // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                  // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                          // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                            // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_src_data;                                                 // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                      // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                   // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                   // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                       // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                    // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                          // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                 // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                          // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                     // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                         // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                    // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                  // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [113:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                   // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                  // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                            // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                               // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [113:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                               // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                             // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                              // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                             // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [112:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                              // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [7:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] framereader_avalon_slave_agent_m0_readdata;                                         // framereader_avalon_slave_translator:uav_readdata -> framereader_avalon_slave_agent:m0_readdata
	wire          framereader_avalon_slave_agent_m0_waitrequest;                                      // framereader_avalon_slave_translator:uav_waitrequest -> framereader_avalon_slave_agent:m0_waitrequest
	wire          framereader_avalon_slave_agent_m0_debugaccess;                                      // framereader_avalon_slave_agent:m0_debugaccess -> framereader_avalon_slave_translator:uav_debugaccess
	wire   [31:0] framereader_avalon_slave_agent_m0_address;                                          // framereader_avalon_slave_agent:m0_address -> framereader_avalon_slave_translator:uav_address
	wire    [3:0] framereader_avalon_slave_agent_m0_byteenable;                                       // framereader_avalon_slave_agent:m0_byteenable -> framereader_avalon_slave_translator:uav_byteenable
	wire          framereader_avalon_slave_agent_m0_read;                                             // framereader_avalon_slave_agent:m0_read -> framereader_avalon_slave_translator:uav_read
	wire          framereader_avalon_slave_agent_m0_readdatavalid;                                    // framereader_avalon_slave_translator:uav_readdatavalid -> framereader_avalon_slave_agent:m0_readdatavalid
	wire          framereader_avalon_slave_agent_m0_lock;                                             // framereader_avalon_slave_agent:m0_lock -> framereader_avalon_slave_translator:uav_lock
	wire   [31:0] framereader_avalon_slave_agent_m0_writedata;                                        // framereader_avalon_slave_agent:m0_writedata -> framereader_avalon_slave_translator:uav_writedata
	wire          framereader_avalon_slave_agent_m0_write;                                            // framereader_avalon_slave_agent:m0_write -> framereader_avalon_slave_translator:uav_write
	wire    [2:0] framereader_avalon_slave_agent_m0_burstcount;                                       // framereader_avalon_slave_agent:m0_burstcount -> framereader_avalon_slave_translator:uav_burstcount
	wire          framereader_avalon_slave_agent_rf_source_valid;                                     // framereader_avalon_slave_agent:rf_source_valid -> framereader_avalon_slave_agent_rsp_fifo:in_valid
	wire  [113:0] framereader_avalon_slave_agent_rf_source_data;                                      // framereader_avalon_slave_agent:rf_source_data -> framereader_avalon_slave_agent_rsp_fifo:in_data
	wire          framereader_avalon_slave_agent_rf_source_ready;                                     // framereader_avalon_slave_agent_rsp_fifo:in_ready -> framereader_avalon_slave_agent:rf_source_ready
	wire          framereader_avalon_slave_agent_rf_source_startofpacket;                             // framereader_avalon_slave_agent:rf_source_startofpacket -> framereader_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          framereader_avalon_slave_agent_rf_source_endofpacket;                               // framereader_avalon_slave_agent:rf_source_endofpacket -> framereader_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          framereader_avalon_slave_agent_rsp_fifo_out_valid;                                  // framereader_avalon_slave_agent_rsp_fifo:out_valid -> framereader_avalon_slave_agent:rf_sink_valid
	wire  [113:0] framereader_avalon_slave_agent_rsp_fifo_out_data;                                   // framereader_avalon_slave_agent_rsp_fifo:out_data -> framereader_avalon_slave_agent:rf_sink_data
	wire          framereader_avalon_slave_agent_rsp_fifo_out_ready;                                  // framereader_avalon_slave_agent:rf_sink_ready -> framereader_avalon_slave_agent_rsp_fifo:out_ready
	wire          framereader_avalon_slave_agent_rsp_fifo_out_startofpacket;                          // framereader_avalon_slave_agent_rsp_fifo:out_startofpacket -> framereader_avalon_slave_agent:rf_sink_startofpacket
	wire          framereader_avalon_slave_agent_rsp_fifo_out_endofpacket;                            // framereader_avalon_slave_agent_rsp_fifo:out_endofpacket -> framereader_avalon_slave_agent:rf_sink_endofpacket
	wire          framereader_avalon_slave_agent_rdata_fifo_src_valid;                                // framereader_avalon_slave_agent:rdata_fifo_src_valid -> framereader_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] framereader_avalon_slave_agent_rdata_fifo_src_data;                                 // framereader_avalon_slave_agent:rdata_fifo_src_data -> framereader_avalon_slave_agent_rdata_fifo:in_data
	wire          framereader_avalon_slave_agent_rdata_fifo_src_ready;                                // framereader_avalon_slave_agent_rdata_fifo:in_ready -> framereader_avalon_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> framereader_avalon_slave_agent:cp_valid
	wire  [112:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> framereader_avalon_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // framereader_avalon_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [7:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> framereader_avalon_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> framereader_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> framereader_avalon_slave_agent:cp_endofpacket
	wire   [31:0] nios2_debug_mem_slave_agent_m0_readdata;                                            // nios2_debug_mem_slave_translator:uav_readdata -> nios2_debug_mem_slave_agent:m0_readdata
	wire          nios2_debug_mem_slave_agent_m0_waitrequest;                                         // nios2_debug_mem_slave_translator:uav_waitrequest -> nios2_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_debug_mem_slave_agent_m0_debugaccess;                                         // nios2_debug_mem_slave_agent:m0_debugaccess -> nios2_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_debug_mem_slave_agent_m0_address;                                             // nios2_debug_mem_slave_agent:m0_address -> nios2_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_debug_mem_slave_agent_m0_byteenable;                                          // nios2_debug_mem_slave_agent:m0_byteenable -> nios2_debug_mem_slave_translator:uav_byteenable
	wire          nios2_debug_mem_slave_agent_m0_read;                                                // nios2_debug_mem_slave_agent:m0_read -> nios2_debug_mem_slave_translator:uav_read
	wire          nios2_debug_mem_slave_agent_m0_readdatavalid;                                       // nios2_debug_mem_slave_translator:uav_readdatavalid -> nios2_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_debug_mem_slave_agent_m0_lock;                                                // nios2_debug_mem_slave_agent:m0_lock -> nios2_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_debug_mem_slave_agent_m0_writedata;                                           // nios2_debug_mem_slave_agent:m0_writedata -> nios2_debug_mem_slave_translator:uav_writedata
	wire          nios2_debug_mem_slave_agent_m0_write;                                               // nios2_debug_mem_slave_agent:m0_write -> nios2_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_debug_mem_slave_agent_m0_burstcount;                                          // nios2_debug_mem_slave_agent:m0_burstcount -> nios2_debug_mem_slave_translator:uav_burstcount
	wire          nios2_debug_mem_slave_agent_rf_source_valid;                                        // nios2_debug_mem_slave_agent:rf_source_valid -> nios2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [113:0] nios2_debug_mem_slave_agent_rf_source_data;                                         // nios2_debug_mem_slave_agent:rf_source_data -> nios2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_debug_mem_slave_agent_rf_source_ready;                                        // nios2_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_debug_mem_slave_agent:rf_source_ready
	wire          nios2_debug_mem_slave_agent_rf_source_startofpacket;                                // nios2_debug_mem_slave_agent:rf_source_startofpacket -> nios2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_debug_mem_slave_agent_rf_source_endofpacket;                                  // nios2_debug_mem_slave_agent:rf_source_endofpacket -> nios2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_valid;                                     // nios2_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_debug_mem_slave_agent:rf_sink_valid
	wire  [113:0] nios2_debug_mem_slave_agent_rsp_fifo_out_data;                                      // nios2_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_debug_mem_slave_agent:rf_sink_data
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_ready;                                     // nios2_debug_mem_slave_agent:rf_sink_ready -> nios2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                             // nios2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                               // nios2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          nios2_debug_mem_slave_agent_rdata_fifo_src_valid;                                   // nios2_debug_mem_slave_agent:rdata_fifo_src_valid -> nios2_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_debug_mem_slave_agent_rdata_fifo_src_data;                                    // nios2_debug_mem_slave_agent:rdata_fifo_src_data -> nios2_debug_mem_slave_agent_rdata_fifo:in_data
	wire          nios2_debug_mem_slave_agent_rdata_fifo_src_ready;                                   // nios2_debug_mem_slave_agent_rdata_fifo:in_ready -> nios2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> nios2_debug_mem_slave_agent:cp_valid
	wire  [112:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> nios2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                              // nios2_debug_mem_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [7:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> nios2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> nios2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> nios2_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] mm_raytracing_0_mm_nios_slave_agent_m0_readdata;                                    // mm_raytracing_0_mm_nios_slave_translator:uav_readdata -> mm_raytracing_0_mm_nios_slave_agent:m0_readdata
	wire          mm_raytracing_0_mm_nios_slave_agent_m0_waitrequest;                                 // mm_raytracing_0_mm_nios_slave_translator:uav_waitrequest -> mm_raytracing_0_mm_nios_slave_agent:m0_waitrequest
	wire          mm_raytracing_0_mm_nios_slave_agent_m0_debugaccess;                                 // mm_raytracing_0_mm_nios_slave_agent:m0_debugaccess -> mm_raytracing_0_mm_nios_slave_translator:uav_debugaccess
	wire   [31:0] mm_raytracing_0_mm_nios_slave_agent_m0_address;                                     // mm_raytracing_0_mm_nios_slave_agent:m0_address -> mm_raytracing_0_mm_nios_slave_translator:uav_address
	wire    [3:0] mm_raytracing_0_mm_nios_slave_agent_m0_byteenable;                                  // mm_raytracing_0_mm_nios_slave_agent:m0_byteenable -> mm_raytracing_0_mm_nios_slave_translator:uav_byteenable
	wire          mm_raytracing_0_mm_nios_slave_agent_m0_read;                                        // mm_raytracing_0_mm_nios_slave_agent:m0_read -> mm_raytracing_0_mm_nios_slave_translator:uav_read
	wire          mm_raytracing_0_mm_nios_slave_agent_m0_readdatavalid;                               // mm_raytracing_0_mm_nios_slave_translator:uav_readdatavalid -> mm_raytracing_0_mm_nios_slave_agent:m0_readdatavalid
	wire          mm_raytracing_0_mm_nios_slave_agent_m0_lock;                                        // mm_raytracing_0_mm_nios_slave_agent:m0_lock -> mm_raytracing_0_mm_nios_slave_translator:uav_lock
	wire   [31:0] mm_raytracing_0_mm_nios_slave_agent_m0_writedata;                                   // mm_raytracing_0_mm_nios_slave_agent:m0_writedata -> mm_raytracing_0_mm_nios_slave_translator:uav_writedata
	wire          mm_raytracing_0_mm_nios_slave_agent_m0_write;                                       // mm_raytracing_0_mm_nios_slave_agent:m0_write -> mm_raytracing_0_mm_nios_slave_translator:uav_write
	wire    [2:0] mm_raytracing_0_mm_nios_slave_agent_m0_burstcount;                                  // mm_raytracing_0_mm_nios_slave_agent:m0_burstcount -> mm_raytracing_0_mm_nios_slave_translator:uav_burstcount
	wire          mm_raytracing_0_mm_nios_slave_agent_rf_source_valid;                                // mm_raytracing_0_mm_nios_slave_agent:rf_source_valid -> mm_raytracing_0_mm_nios_slave_agent_rsp_fifo:in_valid
	wire  [113:0] mm_raytracing_0_mm_nios_slave_agent_rf_source_data;                                 // mm_raytracing_0_mm_nios_slave_agent:rf_source_data -> mm_raytracing_0_mm_nios_slave_agent_rsp_fifo:in_data
	wire          mm_raytracing_0_mm_nios_slave_agent_rf_source_ready;                                // mm_raytracing_0_mm_nios_slave_agent_rsp_fifo:in_ready -> mm_raytracing_0_mm_nios_slave_agent:rf_source_ready
	wire          mm_raytracing_0_mm_nios_slave_agent_rf_source_startofpacket;                        // mm_raytracing_0_mm_nios_slave_agent:rf_source_startofpacket -> mm_raytracing_0_mm_nios_slave_agent_rsp_fifo:in_startofpacket
	wire          mm_raytracing_0_mm_nios_slave_agent_rf_source_endofpacket;                          // mm_raytracing_0_mm_nios_slave_agent:rf_source_endofpacket -> mm_raytracing_0_mm_nios_slave_agent_rsp_fifo:in_endofpacket
	wire          mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_valid;                             // mm_raytracing_0_mm_nios_slave_agent_rsp_fifo:out_valid -> mm_raytracing_0_mm_nios_slave_agent:rf_sink_valid
	wire  [113:0] mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_data;                              // mm_raytracing_0_mm_nios_slave_agent_rsp_fifo:out_data -> mm_raytracing_0_mm_nios_slave_agent:rf_sink_data
	wire          mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_ready;                             // mm_raytracing_0_mm_nios_slave_agent:rf_sink_ready -> mm_raytracing_0_mm_nios_slave_agent_rsp_fifo:out_ready
	wire          mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_startofpacket;                     // mm_raytracing_0_mm_nios_slave_agent_rsp_fifo:out_startofpacket -> mm_raytracing_0_mm_nios_slave_agent:rf_sink_startofpacket
	wire          mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_endofpacket;                       // mm_raytracing_0_mm_nios_slave_agent_rsp_fifo:out_endofpacket -> mm_raytracing_0_mm_nios_slave_agent:rf_sink_endofpacket
	wire          mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_src_valid;                           // mm_raytracing_0_mm_nios_slave_agent:rdata_fifo_src_valid -> mm_raytracing_0_mm_nios_slave_agent_rdata_fifo:in_valid
	wire   [33:0] mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_src_data;                            // mm_raytracing_0_mm_nios_slave_agent:rdata_fifo_src_data -> mm_raytracing_0_mm_nios_slave_agent_rdata_fifo:in_data
	wire          mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_src_ready;                           // mm_raytracing_0_mm_nios_slave_agent_rdata_fifo:in_ready -> mm_raytracing_0_mm_nios_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> mm_raytracing_0_mm_nios_slave_agent:cp_valid
	wire  [112:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> mm_raytracing_0_mm_nios_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                              // mm_raytracing_0_mm_nios_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [7:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> mm_raytracing_0_mm_nios_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> mm_raytracing_0_mm_nios_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> mm_raytracing_0_mm_nios_slave_agent:cp_endofpacket
	wire   [31:0] altpll_pll_slave_agent_m0_readdata;                                                 // altpll_pll_slave_translator:uav_readdata -> altpll_pll_slave_agent:m0_readdata
	wire          altpll_pll_slave_agent_m0_waitrequest;                                              // altpll_pll_slave_translator:uav_waitrequest -> altpll_pll_slave_agent:m0_waitrequest
	wire          altpll_pll_slave_agent_m0_debugaccess;                                              // altpll_pll_slave_agent:m0_debugaccess -> altpll_pll_slave_translator:uav_debugaccess
	wire   [31:0] altpll_pll_slave_agent_m0_address;                                                  // altpll_pll_slave_agent:m0_address -> altpll_pll_slave_translator:uav_address
	wire    [3:0] altpll_pll_slave_agent_m0_byteenable;                                               // altpll_pll_slave_agent:m0_byteenable -> altpll_pll_slave_translator:uav_byteenable
	wire          altpll_pll_slave_agent_m0_read;                                                     // altpll_pll_slave_agent:m0_read -> altpll_pll_slave_translator:uav_read
	wire          altpll_pll_slave_agent_m0_readdatavalid;                                            // altpll_pll_slave_translator:uav_readdatavalid -> altpll_pll_slave_agent:m0_readdatavalid
	wire          altpll_pll_slave_agent_m0_lock;                                                     // altpll_pll_slave_agent:m0_lock -> altpll_pll_slave_translator:uav_lock
	wire   [31:0] altpll_pll_slave_agent_m0_writedata;                                                // altpll_pll_slave_agent:m0_writedata -> altpll_pll_slave_translator:uav_writedata
	wire          altpll_pll_slave_agent_m0_write;                                                    // altpll_pll_slave_agent:m0_write -> altpll_pll_slave_translator:uav_write
	wire    [2:0] altpll_pll_slave_agent_m0_burstcount;                                               // altpll_pll_slave_agent:m0_burstcount -> altpll_pll_slave_translator:uav_burstcount
	wire          altpll_pll_slave_agent_rf_source_valid;                                             // altpll_pll_slave_agent:rf_source_valid -> altpll_pll_slave_agent_rsp_fifo:in_valid
	wire  [113:0] altpll_pll_slave_agent_rf_source_data;                                              // altpll_pll_slave_agent:rf_source_data -> altpll_pll_slave_agent_rsp_fifo:in_data
	wire          altpll_pll_slave_agent_rf_source_ready;                                             // altpll_pll_slave_agent_rsp_fifo:in_ready -> altpll_pll_slave_agent:rf_source_ready
	wire          altpll_pll_slave_agent_rf_source_startofpacket;                                     // altpll_pll_slave_agent:rf_source_startofpacket -> altpll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          altpll_pll_slave_agent_rf_source_endofpacket;                                       // altpll_pll_slave_agent:rf_source_endofpacket -> altpll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          altpll_pll_slave_agent_rsp_fifo_out_valid;                                          // altpll_pll_slave_agent_rsp_fifo:out_valid -> altpll_pll_slave_agent:rf_sink_valid
	wire  [113:0] altpll_pll_slave_agent_rsp_fifo_out_data;                                           // altpll_pll_slave_agent_rsp_fifo:out_data -> altpll_pll_slave_agent:rf_sink_data
	wire          altpll_pll_slave_agent_rsp_fifo_out_ready;                                          // altpll_pll_slave_agent:rf_sink_ready -> altpll_pll_slave_agent_rsp_fifo:out_ready
	wire          altpll_pll_slave_agent_rsp_fifo_out_startofpacket;                                  // altpll_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_pll_slave_agent:rf_sink_startofpacket
	wire          altpll_pll_slave_agent_rsp_fifo_out_endofpacket;                                    // altpll_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_pll_slave_agent:rf_sink_endofpacket
	wire          altpll_pll_slave_agent_rdata_fifo_src_valid;                                        // altpll_pll_slave_agent:rdata_fifo_src_valid -> altpll_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] altpll_pll_slave_agent_rdata_fifo_src_data;                                         // altpll_pll_slave_agent:rdata_fifo_src_data -> altpll_pll_slave_agent_rdata_fifo:in_data
	wire          altpll_pll_slave_agent_rdata_fifo_src_ready;                                        // altpll_pll_slave_agent_rdata_fifo:in_ready -> altpll_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> altpll_pll_slave_agent:cp_valid
	wire  [112:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> altpll_pll_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // altpll_pll_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [7:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> altpll_pll_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> altpll_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> altpll_pll_slave_agent:cp_endofpacket
	wire   [31:0] systimer_s1_agent_m0_readdata;                                                      // systimer_s1_translator:uav_readdata -> systimer_s1_agent:m0_readdata
	wire          systimer_s1_agent_m0_waitrequest;                                                   // systimer_s1_translator:uav_waitrequest -> systimer_s1_agent:m0_waitrequest
	wire          systimer_s1_agent_m0_debugaccess;                                                   // systimer_s1_agent:m0_debugaccess -> systimer_s1_translator:uav_debugaccess
	wire   [31:0] systimer_s1_agent_m0_address;                                                       // systimer_s1_agent:m0_address -> systimer_s1_translator:uav_address
	wire    [3:0] systimer_s1_agent_m0_byteenable;                                                    // systimer_s1_agent:m0_byteenable -> systimer_s1_translator:uav_byteenable
	wire          systimer_s1_agent_m0_read;                                                          // systimer_s1_agent:m0_read -> systimer_s1_translator:uav_read
	wire          systimer_s1_agent_m0_readdatavalid;                                                 // systimer_s1_translator:uav_readdatavalid -> systimer_s1_agent:m0_readdatavalid
	wire          systimer_s1_agent_m0_lock;                                                          // systimer_s1_agent:m0_lock -> systimer_s1_translator:uav_lock
	wire   [31:0] systimer_s1_agent_m0_writedata;                                                     // systimer_s1_agent:m0_writedata -> systimer_s1_translator:uav_writedata
	wire          systimer_s1_agent_m0_write;                                                         // systimer_s1_agent:m0_write -> systimer_s1_translator:uav_write
	wire    [2:0] systimer_s1_agent_m0_burstcount;                                                    // systimer_s1_agent:m0_burstcount -> systimer_s1_translator:uav_burstcount
	wire          systimer_s1_agent_rf_source_valid;                                                  // systimer_s1_agent:rf_source_valid -> systimer_s1_agent_rsp_fifo:in_valid
	wire  [113:0] systimer_s1_agent_rf_source_data;                                                   // systimer_s1_agent:rf_source_data -> systimer_s1_agent_rsp_fifo:in_data
	wire          systimer_s1_agent_rf_source_ready;                                                  // systimer_s1_agent_rsp_fifo:in_ready -> systimer_s1_agent:rf_source_ready
	wire          systimer_s1_agent_rf_source_startofpacket;                                          // systimer_s1_agent:rf_source_startofpacket -> systimer_s1_agent_rsp_fifo:in_startofpacket
	wire          systimer_s1_agent_rf_source_endofpacket;                                            // systimer_s1_agent:rf_source_endofpacket -> systimer_s1_agent_rsp_fifo:in_endofpacket
	wire          systimer_s1_agent_rsp_fifo_out_valid;                                               // systimer_s1_agent_rsp_fifo:out_valid -> systimer_s1_agent:rf_sink_valid
	wire  [113:0] systimer_s1_agent_rsp_fifo_out_data;                                                // systimer_s1_agent_rsp_fifo:out_data -> systimer_s1_agent:rf_sink_data
	wire          systimer_s1_agent_rsp_fifo_out_ready;                                               // systimer_s1_agent:rf_sink_ready -> systimer_s1_agent_rsp_fifo:out_ready
	wire          systimer_s1_agent_rsp_fifo_out_startofpacket;                                       // systimer_s1_agent_rsp_fifo:out_startofpacket -> systimer_s1_agent:rf_sink_startofpacket
	wire          systimer_s1_agent_rsp_fifo_out_endofpacket;                                         // systimer_s1_agent_rsp_fifo:out_endofpacket -> systimer_s1_agent:rf_sink_endofpacket
	wire          systimer_s1_agent_rdata_fifo_src_valid;                                             // systimer_s1_agent:rdata_fifo_src_valid -> systimer_s1_agent_rdata_fifo:in_valid
	wire   [33:0] systimer_s1_agent_rdata_fifo_src_data;                                              // systimer_s1_agent:rdata_fifo_src_data -> systimer_s1_agent_rdata_fifo:in_data
	wire          systimer_s1_agent_rdata_fifo_src_ready;                                             // systimer_s1_agent_rdata_fifo:in_ready -> systimer_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> systimer_s1_agent:cp_valid
	wire  [112:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> systimer_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                              // systimer_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [7:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> systimer_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> systimer_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> systimer_s1_agent:cp_endofpacket
	wire   [31:0] onchip_ram_s1_agent_m0_readdata;                                                    // onchip_ram_s1_translator:uav_readdata -> onchip_ram_s1_agent:m0_readdata
	wire          onchip_ram_s1_agent_m0_waitrequest;                                                 // onchip_ram_s1_translator:uav_waitrequest -> onchip_ram_s1_agent:m0_waitrequest
	wire          onchip_ram_s1_agent_m0_debugaccess;                                                 // onchip_ram_s1_agent:m0_debugaccess -> onchip_ram_s1_translator:uav_debugaccess
	wire   [31:0] onchip_ram_s1_agent_m0_address;                                                     // onchip_ram_s1_agent:m0_address -> onchip_ram_s1_translator:uav_address
	wire    [3:0] onchip_ram_s1_agent_m0_byteenable;                                                  // onchip_ram_s1_agent:m0_byteenable -> onchip_ram_s1_translator:uav_byteenable
	wire          onchip_ram_s1_agent_m0_read;                                                        // onchip_ram_s1_agent:m0_read -> onchip_ram_s1_translator:uav_read
	wire          onchip_ram_s1_agent_m0_readdatavalid;                                               // onchip_ram_s1_translator:uav_readdatavalid -> onchip_ram_s1_agent:m0_readdatavalid
	wire          onchip_ram_s1_agent_m0_lock;                                                        // onchip_ram_s1_agent:m0_lock -> onchip_ram_s1_translator:uav_lock
	wire   [31:0] onchip_ram_s1_agent_m0_writedata;                                                   // onchip_ram_s1_agent:m0_writedata -> onchip_ram_s1_translator:uav_writedata
	wire          onchip_ram_s1_agent_m0_write;                                                       // onchip_ram_s1_agent:m0_write -> onchip_ram_s1_translator:uav_write
	wire    [2:0] onchip_ram_s1_agent_m0_burstcount;                                                  // onchip_ram_s1_agent:m0_burstcount -> onchip_ram_s1_translator:uav_burstcount
	wire          onchip_ram_s1_agent_rf_source_valid;                                                // onchip_ram_s1_agent:rf_source_valid -> onchip_ram_s1_agent_rsp_fifo:in_valid
	wire  [113:0] onchip_ram_s1_agent_rf_source_data;                                                 // onchip_ram_s1_agent:rf_source_data -> onchip_ram_s1_agent_rsp_fifo:in_data
	wire          onchip_ram_s1_agent_rf_source_ready;                                                // onchip_ram_s1_agent_rsp_fifo:in_ready -> onchip_ram_s1_agent:rf_source_ready
	wire          onchip_ram_s1_agent_rf_source_startofpacket;                                        // onchip_ram_s1_agent:rf_source_startofpacket -> onchip_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_ram_s1_agent_rf_source_endofpacket;                                          // onchip_ram_s1_agent:rf_source_endofpacket -> onchip_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_ram_s1_agent_rsp_fifo_out_valid;                                             // onchip_ram_s1_agent_rsp_fifo:out_valid -> onchip_ram_s1_agent:rf_sink_valid
	wire  [113:0] onchip_ram_s1_agent_rsp_fifo_out_data;                                              // onchip_ram_s1_agent_rsp_fifo:out_data -> onchip_ram_s1_agent:rf_sink_data
	wire          onchip_ram_s1_agent_rsp_fifo_out_ready;                                             // onchip_ram_s1_agent:rf_sink_ready -> onchip_ram_s1_agent_rsp_fifo:out_ready
	wire          onchip_ram_s1_agent_rsp_fifo_out_startofpacket;                                     // onchip_ram_s1_agent_rsp_fifo:out_startofpacket -> onchip_ram_s1_agent:rf_sink_startofpacket
	wire          onchip_ram_s1_agent_rsp_fifo_out_endofpacket;                                       // onchip_ram_s1_agent_rsp_fifo:out_endofpacket -> onchip_ram_s1_agent:rf_sink_endofpacket
	wire          onchip_ram_s1_agent_rdata_fifo_src_valid;                                           // onchip_ram_s1_agent:rdata_fifo_src_valid -> onchip_ram_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_ram_s1_agent_rdata_fifo_src_data;                                            // onchip_ram_s1_agent:rdata_fifo_src_data -> onchip_ram_s1_agent_rdata_fifo:in_data
	wire          onchip_ram_s1_agent_rdata_fifo_src_ready;                                           // onchip_ram_s1_agent_rdata_fifo:in_ready -> onchip_ram_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> onchip_ram_s1_agent:cp_valid
	wire  [112:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> onchip_ram_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // onchip_ram_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire    [7:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> onchip_ram_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> onchip_ram_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> onchip_ram_s1_agent:cp_endofpacket
	wire          framereader_avalon_master_agent_cp_valid;                                           // framereader_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [112:0] framereader_avalon_master_agent_cp_data;                                            // framereader_avalon_master_agent:cp_data -> router:sink_data
	wire          framereader_avalon_master_agent_cp_ready;                                           // router:sink_ready -> framereader_avalon_master_agent:cp_ready
	wire          framereader_avalon_master_agent_cp_startofpacket;                                   // framereader_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          framereader_avalon_master_agent_cp_endofpacket;                                     // framereader_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [112:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire    [7:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_data_master_agent_cp_valid;                                                   // nios2_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [112:0] nios2_data_master_agent_cp_data;                                                    // nios2_data_master_agent:cp_data -> router_001:sink_data
	wire          nios2_data_master_agent_cp_ready;                                                   // router_001:sink_ready -> nios2_data_master_agent:cp_ready
	wire          nios2_data_master_agent_cp_startofpacket;                                           // nios2_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_data_master_agent_cp_endofpacket;                                             // nios2_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          mm_raytracing_0_mm_sdram_master_agent_cp_valid;                                     // mm_raytracing_0_mm_sdram_master_agent:cp_valid -> router_002:sink_valid
	wire  [112:0] mm_raytracing_0_mm_sdram_master_agent_cp_data;                                      // mm_raytracing_0_mm_sdram_master_agent:cp_data -> router_002:sink_data
	wire          mm_raytracing_0_mm_sdram_master_agent_cp_ready;                                     // router_002:sink_ready -> mm_raytracing_0_mm_sdram_master_agent:cp_ready
	wire          mm_raytracing_0_mm_sdram_master_agent_cp_startofpacket;                             // mm_raytracing_0_mm_sdram_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          mm_raytracing_0_mm_sdram_master_agent_cp_endofpacket;                               // mm_raytracing_0_mm_sdram_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [112:0] router_002_src_data;                                                                // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                               // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [7:0] router_002_src_channel;                                                             // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          nios2_instruction_master_agent_cp_valid;                                            // nios2_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [112:0] nios2_instruction_master_agent_cp_data;                                             // nios2_instruction_master_agent:cp_data -> router_003:sink_data
	wire          nios2_instruction_master_agent_cp_ready;                                            // router_003:sink_ready -> nios2_instruction_master_agent:cp_ready
	wire          nios2_instruction_master_agent_cp_startofpacket;                                    // nios2_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          nios2_instruction_master_agent_cp_endofpacket;                                      // nios2_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                            // sdram_s1_agent:rp_valid -> router_004:sink_valid
	wire  [112:0] sdram_s1_agent_rp_data;                                                             // sdram_s1_agent:rp_data -> router_004:sink_data
	wire          sdram_s1_agent_rp_ready;                                                            // router_004:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                    // sdram_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                      // sdram_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux:sink_valid
	wire  [112:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                               // rsp_demux:sink_ready -> router_004:src_ready
	wire    [7:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                         // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_005:sink_valid
	wire  [112:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                          // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_005:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                         // router_005:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                   // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [112:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                               // rsp_demux_001:sink_ready -> router_005:src_ready
	wire    [7:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          framereader_avalon_slave_agent_rp_valid;                                            // framereader_avalon_slave_agent:rp_valid -> router_006:sink_valid
	wire  [112:0] framereader_avalon_slave_agent_rp_data;                                             // framereader_avalon_slave_agent:rp_data -> router_006:sink_data
	wire          framereader_avalon_slave_agent_rp_ready;                                            // router_006:sink_ready -> framereader_avalon_slave_agent:rp_ready
	wire          framereader_avalon_slave_agent_rp_startofpacket;                                    // framereader_avalon_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          framereader_avalon_slave_agent_rp_endofpacket;                                      // framereader_avalon_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [112:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                               // rsp_demux_002:sink_ready -> router_006:src_ready
	wire    [7:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          nios2_debug_mem_slave_agent_rp_valid;                                               // nios2_debug_mem_slave_agent:rp_valid -> router_007:sink_valid
	wire  [112:0] nios2_debug_mem_slave_agent_rp_data;                                                // nios2_debug_mem_slave_agent:rp_data -> router_007:sink_data
	wire          nios2_debug_mem_slave_agent_rp_ready;                                               // router_007:sink_ready -> nios2_debug_mem_slave_agent:rp_ready
	wire          nios2_debug_mem_slave_agent_rp_startofpacket;                                       // nios2_debug_mem_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          nios2_debug_mem_slave_agent_rp_endofpacket;                                         // nios2_debug_mem_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [112:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_003:sink_ready -> router_007:src_ready
	wire    [7:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          mm_raytracing_0_mm_nios_slave_agent_rp_valid;                                       // mm_raytracing_0_mm_nios_slave_agent:rp_valid -> router_008:sink_valid
	wire  [112:0] mm_raytracing_0_mm_nios_slave_agent_rp_data;                                        // mm_raytracing_0_mm_nios_slave_agent:rp_data -> router_008:sink_data
	wire          mm_raytracing_0_mm_nios_slave_agent_rp_ready;                                       // router_008:sink_ready -> mm_raytracing_0_mm_nios_slave_agent:rp_ready
	wire          mm_raytracing_0_mm_nios_slave_agent_rp_startofpacket;                               // mm_raytracing_0_mm_nios_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          mm_raytracing_0_mm_nios_slave_agent_rp_endofpacket;                                 // mm_raytracing_0_mm_nios_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [112:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_004:sink_ready -> router_008:src_ready
	wire    [7:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          altpll_pll_slave_agent_rp_valid;                                                    // altpll_pll_slave_agent:rp_valid -> router_009:sink_valid
	wire  [112:0] altpll_pll_slave_agent_rp_data;                                                     // altpll_pll_slave_agent:rp_data -> router_009:sink_data
	wire          altpll_pll_slave_agent_rp_ready;                                                    // router_009:sink_ready -> altpll_pll_slave_agent:rp_ready
	wire          altpll_pll_slave_agent_rp_startofpacket;                                            // altpll_pll_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          altpll_pll_slave_agent_rp_endofpacket;                                              // altpll_pll_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_005:sink_valid
	wire  [112:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_005:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_005:sink_ready -> router_009:src_ready
	wire    [7:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_005:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          systimer_s1_agent_rp_valid;                                                         // systimer_s1_agent:rp_valid -> router_010:sink_valid
	wire  [112:0] systimer_s1_agent_rp_data;                                                          // systimer_s1_agent:rp_data -> router_010:sink_data
	wire          systimer_s1_agent_rp_ready;                                                         // router_010:sink_ready -> systimer_s1_agent:rp_ready
	wire          systimer_s1_agent_rp_startofpacket;                                                 // systimer_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          systimer_s1_agent_rp_endofpacket;                                                   // systimer_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_006:sink_valid
	wire  [112:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_006:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_006:sink_ready -> router_010:src_ready
	wire    [7:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_006:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          onchip_ram_s1_agent_rp_valid;                                                       // onchip_ram_s1_agent:rp_valid -> router_011:sink_valid
	wire  [112:0] onchip_ram_s1_agent_rp_data;                                                        // onchip_ram_s1_agent:rp_data -> router_011:sink_data
	wire          onchip_ram_s1_agent_rp_ready;                                                       // router_011:sink_ready -> onchip_ram_s1_agent:rp_ready
	wire          onchip_ram_s1_agent_rp_startofpacket;                                               // onchip_ram_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          onchip_ram_s1_agent_rp_endofpacket;                                                 // onchip_ram_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_007:sink_valid
	wire  [112:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_007:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_007:sink_ready -> router_011:src_ready
	wire    [7:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_007:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> nios2_data_master_limiter:cmd_sink_valid
	wire  [112:0] router_001_src_data;                                                                // router_001:src_data -> nios2_data_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                               // nios2_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [7:0] router_001_src_channel;                                                             // router_001:src_channel -> nios2_data_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> nios2_data_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> nios2_data_master_limiter:cmd_sink_endofpacket
	wire  [112:0] nios2_data_master_limiter_cmd_src_data;                                             // nios2_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          nios2_data_master_limiter_cmd_src_ready;                                            // cmd_demux_001:sink_ready -> nios2_data_master_limiter:cmd_src_ready
	wire    [7:0] nios2_data_master_limiter_cmd_src_channel;                                          // nios2_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          nios2_data_master_limiter_cmd_src_startofpacket;                                    // nios2_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          nios2_data_master_limiter_cmd_src_endofpacket;                                      // nios2_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_data_master_limiter:rsp_sink_valid
	wire  [112:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_data_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                              // nios2_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [7:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_data_master_limiter:rsp_sink_endofpacket
	wire          nios2_data_master_limiter_rsp_src_valid;                                            // nios2_data_master_limiter:rsp_src_valid -> nios2_data_master_agent:rp_valid
	wire  [112:0] nios2_data_master_limiter_rsp_src_data;                                             // nios2_data_master_limiter:rsp_src_data -> nios2_data_master_agent:rp_data
	wire          nios2_data_master_limiter_rsp_src_ready;                                            // nios2_data_master_agent:rp_ready -> nios2_data_master_limiter:rsp_src_ready
	wire    [7:0] nios2_data_master_limiter_rsp_src_channel;                                          // nios2_data_master_limiter:rsp_src_channel -> nios2_data_master_agent:rp_channel
	wire          nios2_data_master_limiter_rsp_src_startofpacket;                                    // nios2_data_master_limiter:rsp_src_startofpacket -> nios2_data_master_agent:rp_startofpacket
	wire          nios2_data_master_limiter_rsp_src_endofpacket;                                      // nios2_data_master_limiter:rsp_src_endofpacket -> nios2_data_master_agent:rp_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> nios2_instruction_master_limiter:cmd_sink_valid
	wire  [112:0] router_003_src_data;                                                                // router_003:src_data -> nios2_instruction_master_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                               // nios2_instruction_master_limiter:cmd_sink_ready -> router_003:src_ready
	wire    [7:0] router_003_src_channel;                                                             // router_003:src_channel -> nios2_instruction_master_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> nios2_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> nios2_instruction_master_limiter:cmd_sink_endofpacket
	wire  [112:0] nios2_instruction_master_limiter_cmd_src_data;                                      // nios2_instruction_master_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          nios2_instruction_master_limiter_cmd_src_ready;                                     // cmd_demux_003:sink_ready -> nios2_instruction_master_limiter:cmd_src_ready
	wire    [7:0] nios2_instruction_master_limiter_cmd_src_channel;                                   // nios2_instruction_master_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          nios2_instruction_master_limiter_cmd_src_startofpacket;                             // nios2_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          nios2_instruction_master_limiter_cmd_src_endofpacket;                               // nios2_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                              // rsp_mux_003:src_valid -> nios2_instruction_master_limiter:rsp_sink_valid
	wire  [112:0] rsp_mux_003_src_data;                                                               // rsp_mux_003:src_data -> nios2_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                              // nios2_instruction_master_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire    [7:0] rsp_mux_003_src_channel;                                                            // rsp_mux_003:src_channel -> nios2_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                      // rsp_mux_003:src_startofpacket -> nios2_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                        // rsp_mux_003:src_endofpacket -> nios2_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_instruction_master_limiter_rsp_src_valid;                                     // nios2_instruction_master_limiter:rsp_src_valid -> nios2_instruction_master_agent:rp_valid
	wire  [112:0] nios2_instruction_master_limiter_rsp_src_data;                                      // nios2_instruction_master_limiter:rsp_src_data -> nios2_instruction_master_agent:rp_data
	wire          nios2_instruction_master_limiter_rsp_src_ready;                                     // nios2_instruction_master_agent:rp_ready -> nios2_instruction_master_limiter:rsp_src_ready
	wire    [7:0] nios2_instruction_master_limiter_rsp_src_channel;                                   // nios2_instruction_master_limiter:rsp_src_channel -> nios2_instruction_master_agent:rp_channel
	wire          nios2_instruction_master_limiter_rsp_src_startofpacket;                             // nios2_instruction_master_limiter:rsp_src_startofpacket -> nios2_instruction_master_agent:rp_startofpacket
	wire          nios2_instruction_master_limiter_rsp_src_endofpacket;                               // nios2_instruction_master_limiter:rsp_src_endofpacket -> nios2_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> sdram_s1_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> sdram_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                  // sdram_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [7:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                               // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire  [112:0] sdram_s1_burst_adapter_source0_data;                                                // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                               // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire    [7:0] sdram_s1_burst_adapter_source0_channel;                                             // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                       // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                         // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [112:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [7:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [112:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [7:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_001:sink0_valid
	wire  [112:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src1_ready;                                                           // cmd_mux_001:sink0_ready -> cmd_demux_001:src1_ready
	wire    [7:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                           // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire  [112:0] cmd_demux_001_src3_data;                                                            // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_001_src3_ready;                                                           // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire    [7:0] cmd_demux_001_src3_channel;                                                         // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                                   // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                     // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                           // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire  [112:0] cmd_demux_001_src6_data;                                                            // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_001_src6_ready;                                                           // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire    [7:0] cmd_demux_001_src6_channel;                                                         // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_001_src6_startofpacket;                                                   // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                     // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                           // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire  [112:0] cmd_demux_001_src7_data;                                                            // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_001_src7_ready;                                                           // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire    [7:0] cmd_demux_001_src7_channel;                                                         // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                   // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                     // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                           // cmd_demux_003:src0_valid -> cmd_mux_003:sink1_valid
	wire  [112:0] cmd_demux_003_src0_data;                                                            // cmd_demux_003:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_003_src0_ready;                                                           // cmd_mux_003:sink1_ready -> cmd_demux_003:src0_ready
	wire    [7:0] cmd_demux_003_src0_channel;                                                         // cmd_demux_003:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                   // cmd_demux_003:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                     // cmd_demux_003:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                           // cmd_demux_003:src1_valid -> cmd_mux_007:sink1_valid
	wire  [112:0] cmd_demux_003_src1_data;                                                            // cmd_demux_003:src1_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_003_src1_ready;                                                           // cmd_mux_007:sink1_ready -> cmd_demux_003:src1_ready
	wire    [7:0] cmd_demux_003_src1_channel;                                                         // cmd_demux_003:src1_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                   // cmd_demux_003:src1_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                     // cmd_demux_003:src1_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [112:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [7:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                               // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [112:0] rsp_demux_src1_data;                                                                // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                               // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [7:0] rsp_demux_src1_channel;                                                             // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                       // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                         // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux_001:sink1_valid
	wire  [112:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_001:src0_ready
	wire    [7:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire  [112:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire    [7:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                           // rsp_demux_003:src1_valid -> rsp_mux_003:sink0_valid
	wire  [112:0] rsp_demux_003_src1_data;                                                            // rsp_demux_003:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_003_src1_ready;                                                           // rsp_mux_003:sink0_ready -> rsp_demux_003:src1_ready
	wire    [7:0] rsp_demux_003_src1_channel;                                                         // rsp_demux_003:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                                   // rsp_demux_003:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                     // rsp_demux_003:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire  [112:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src0_ready;                                                           // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire    [7:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire  [112:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src0_ready;                                                           // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire    [7:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                           // rsp_demux_007:src1_valid -> rsp_mux_003:sink1_valid
	wire  [112:0] rsp_demux_007_src1_data;                                                            // rsp_demux_007:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_007_src1_ready;                                                           // rsp_mux_003:sink1_ready -> rsp_demux_007:src1_ready
	wire    [7:0] rsp_demux_007_src1_channel;                                                         // rsp_demux_007:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_007_src1_startofpacket;                                                   // rsp_demux_007:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                     // rsp_demux_007:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> crosser:in_valid
	wire  [112:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> crosser:in_data
	wire          cmd_demux_001_src2_ready;                                                           // crosser:in_ready -> cmd_demux_001:src2_ready
	wire    [7:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> crosser:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                  // crosser:out_valid -> cmd_mux_002:sink0_valid
	wire  [112:0] crosser_out_data;                                                                   // crosser:out_data -> cmd_mux_002:sink0_data
	wire          crosser_out_ready;                                                                  // cmd_mux_002:sink0_ready -> crosser:out_ready
	wire    [7:0] crosser_out_channel;                                                                // crosser:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_out_startofpacket;                                                          // crosser:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                            // crosser:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                           // cmd_demux_001:src4_valid -> crosser_001:in_valid
	wire  [112:0] cmd_demux_001_src4_data;                                                            // cmd_demux_001:src4_data -> crosser_001:in_data
	wire          cmd_demux_001_src4_ready;                                                           // crosser_001:in_ready -> cmd_demux_001:src4_ready
	wire    [7:0] cmd_demux_001_src4_channel;                                                         // cmd_demux_001:src4_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                                   // cmd_demux_001:src4_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                     // cmd_demux_001:src4_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                              // crosser_001:out_valid -> cmd_mux_004:sink0_valid
	wire  [112:0] crosser_001_out_data;                                                               // crosser_001:out_data -> cmd_mux_004:sink0_data
	wire          crosser_001_out_ready;                                                              // cmd_mux_004:sink0_ready -> crosser_001:out_ready
	wire    [7:0] crosser_001_out_channel;                                                            // crosser_001:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_001_out_startofpacket;                                                      // crosser_001:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                        // crosser_001:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                           // cmd_demux_001:src5_valid -> crosser_002:in_valid
	wire  [112:0] cmd_demux_001_src5_data;                                                            // cmd_demux_001:src5_data -> crosser_002:in_data
	wire          cmd_demux_001_src5_ready;                                                           // crosser_002:in_ready -> cmd_demux_001:src5_ready
	wire    [7:0] cmd_demux_001_src5_channel;                                                         // cmd_demux_001:src5_channel -> crosser_002:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                                   // cmd_demux_001:src5_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                     // cmd_demux_001:src5_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                              // crosser_002:out_valid -> cmd_mux_005:sink0_valid
	wire  [112:0] crosser_002_out_data;                                                               // crosser_002:out_data -> cmd_mux_005:sink0_data
	wire          crosser_002_out_ready;                                                              // cmd_mux_005:sink0_ready -> crosser_002:out_ready
	wire    [7:0] crosser_002_out_channel;                                                            // crosser_002:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_002_out_startofpacket;                                                      // crosser_002:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                        // crosser_002:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                           // cmd_demux_002:src0_valid -> crosser_003:in_valid
	wire  [112:0] cmd_demux_002_src0_data;                                                            // cmd_demux_002:src0_data -> crosser_003:in_data
	wire          cmd_demux_002_src0_ready;                                                           // crosser_003:in_ready -> cmd_demux_002:src0_ready
	wire    [7:0] cmd_demux_002_src0_channel;                                                         // cmd_demux_002:src0_channel -> crosser_003:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                   // cmd_demux_002:src0_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                     // cmd_demux_002:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                              // crosser_003:out_valid -> cmd_mux:sink2_valid
	wire  [112:0] crosser_003_out_data;                                                               // crosser_003:out_data -> cmd_mux:sink2_data
	wire          crosser_003_out_ready;                                                              // cmd_mux:sink2_ready -> crosser_003:out_ready
	wire    [7:0] crosser_003_out_channel;                                                            // crosser_003:out_channel -> cmd_mux:sink2_channel
	wire          crosser_003_out_startofpacket;                                                      // crosser_003:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_003_out_endofpacket;                                                        // crosser_003:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          rsp_demux_src2_valid;                                                               // rsp_demux:src2_valid -> crosser_004:in_valid
	wire  [112:0] rsp_demux_src2_data;                                                                // rsp_demux:src2_data -> crosser_004:in_data
	wire          rsp_demux_src2_ready;                                                               // crosser_004:in_ready -> rsp_demux:src2_ready
	wire    [7:0] rsp_demux_src2_channel;                                                             // rsp_demux:src2_channel -> crosser_004:in_channel
	wire          rsp_demux_src2_startofpacket;                                                       // rsp_demux:src2_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                         // rsp_demux:src2_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                              // crosser_004:out_valid -> rsp_mux_002:sink0_valid
	wire  [112:0] crosser_004_out_data;                                                               // crosser_004:out_data -> rsp_mux_002:sink0_data
	wire          crosser_004_out_ready;                                                              // rsp_mux_002:sink0_ready -> crosser_004:out_ready
	wire    [7:0] crosser_004_out_channel;                                                            // crosser_004:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_004_out_startofpacket;                                                      // crosser_004:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                        // crosser_004:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> crosser_005:in_valid
	wire  [112:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> crosser_005:in_data
	wire          rsp_demux_002_src0_ready;                                                           // crosser_005:in_ready -> rsp_demux_002:src0_ready
	wire    [7:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> crosser_005:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                              // crosser_005:out_valid -> rsp_mux_001:sink2_valid
	wire  [112:0] crosser_005_out_data;                                                               // crosser_005:out_data -> rsp_mux_001:sink2_data
	wire          crosser_005_out_ready;                                                              // rsp_mux_001:sink2_ready -> crosser_005:out_ready
	wire    [7:0] crosser_005_out_channel;                                                            // crosser_005:out_channel -> rsp_mux_001:sink2_channel
	wire          crosser_005_out_startofpacket;                                                      // crosser_005:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          crosser_005_out_endofpacket;                                                        // crosser_005:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> crosser_006:in_valid
	wire  [112:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> crosser_006:in_data
	wire          rsp_demux_004_src0_ready;                                                           // crosser_006:in_ready -> rsp_demux_004:src0_ready
	wire    [7:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> crosser_006:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                              // crosser_006:out_valid -> rsp_mux_001:sink4_valid
	wire  [112:0] crosser_006_out_data;                                                               // crosser_006:out_data -> rsp_mux_001:sink4_data
	wire          crosser_006_out_ready;                                                              // rsp_mux_001:sink4_ready -> crosser_006:out_ready
	wire    [7:0] crosser_006_out_channel;                                                            // crosser_006:out_channel -> rsp_mux_001:sink4_channel
	wire          crosser_006_out_startofpacket;                                                      // crosser_006:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          crosser_006_out_endofpacket;                                                        // crosser_006:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> crosser_007:in_valid
	wire  [112:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> crosser_007:in_data
	wire          rsp_demux_005_src0_ready;                                                           // crosser_007:in_ready -> rsp_demux_005:src0_ready
	wire    [7:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> crosser_007:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                              // crosser_007:out_valid -> rsp_mux_001:sink5_valid
	wire  [112:0] crosser_007_out_data;                                                               // crosser_007:out_data -> rsp_mux_001:sink5_data
	wire          crosser_007_out_ready;                                                              // rsp_mux_001:sink5_ready -> crosser_007:out_ready
	wire    [7:0] crosser_007_out_channel;                                                            // crosser_007:out_channel -> rsp_mux_001:sink5_channel
	wire          crosser_007_out_startofpacket;                                                      // crosser_007:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          crosser_007_out_endofpacket;                                                        // crosser_007:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire    [7:0] nios2_data_master_limiter_cmd_valid_data;                                           // nios2_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [7:0] nios2_instruction_master_limiter_cmd_valid_data;                                    // nios2_instruction_master_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                // sdram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_out_data;                                                 // sdram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                // avalon_st_adapter:in_0_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                             // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                              // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_001:in_0_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          framereader_avalon_slave_agent_rdata_fifo_out_valid;                                // framereader_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] framereader_avalon_slave_agent_rdata_fifo_out_data;                                 // framereader_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          framereader_avalon_slave_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_002:in_0_ready -> framereader_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> framereader_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> framereader_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // framereader_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> framereader_avalon_slave_agent:rdata_fifo_sink_error
	wire          nios2_debug_mem_slave_agent_rdata_fifo_out_valid;                                   // nios2_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] nios2_debug_mem_slave_agent_rdata_fifo_out_data;                                    // nios2_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          nios2_debug_mem_slave_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_003:in_0_ready -> nios2_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> nios2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> nios2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // nios2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> nios2_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_out_valid;                           // mm_raytracing_0_mm_nios_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_out_data;                            // mm_raytracing_0_mm_nios_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_out_ready;                           // avalon_st_adapter_004:in_0_ready -> mm_raytracing_0_mm_nios_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> mm_raytracing_0_mm_nios_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> mm_raytracing_0_mm_nios_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // mm_raytracing_0_mm_nios_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> mm_raytracing_0_mm_nios_slave_agent:rdata_fifo_sink_error
	wire          altpll_pll_slave_agent_rdata_fifo_out_valid;                                        // altpll_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] altpll_pll_slave_agent_rdata_fifo_out_data;                                         // altpll_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          altpll_pll_slave_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_005:in_0_ready -> altpll_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> altpll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> altpll_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // altpll_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> altpll_pll_slave_agent:rdata_fifo_sink_error
	wire          systimer_s1_agent_rdata_fifo_out_valid;                                             // systimer_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] systimer_s1_agent_rdata_fifo_out_data;                                              // systimer_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          systimer_s1_agent_rdata_fifo_out_ready;                                             // avalon_st_adapter_006:in_0_ready -> systimer_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> systimer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> systimer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // systimer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> systimer_s1_agent:rdata_fifo_sink_error
	wire          onchip_ram_s1_agent_rdata_fifo_out_valid;                                           // onchip_ram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] onchip_ram_s1_agent_rdata_fifo_out_data;                                            // onchip_ram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          onchip_ram_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_007:in_0_ready -> onchip_ram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> onchip_ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> onchip_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // onchip_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> onchip_ram_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) framereader_avalon_master_translator (
		.clk                    (altpll_c0_clk),                                                                //                       clk.clk
		.reset                  (framereader_clock_master_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (framereader_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (framereader_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (framereader_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (framereader_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (framereader_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (framereader_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (framereader_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (framereader_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (framereader_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (framereader_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (framereader_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (framereader_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (framereader_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (framereader_avalon_master_burstcount),                                         //                          .burstcount
		.av_read                (framereader_avalon_master_read),                                               //                          .read
		.av_readdata            (framereader_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (framereader_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_write               (1'b0),                                                                         //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                         //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_data_master_translator (
		.clk                    (altpll_c0_clk),                                                        //                       clk.clk
		.reset                  (nios2_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_data_master_read),                                               //                          .read
		.av_readdata            (nios2_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (nios2_data_master_write),                                              //                          .write
		.av_writedata           (nios2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_raytracing_0_mm_sdram_master_translator (
		.clk                    (altpll_c3_clk),                                                                      //                       clk.clk
		.reset                  (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address            (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_raytracing_0_mm_sdram_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_raytracing_0_mm_sdram_master_waitrequest),                                        //                          .waitrequest
		.av_write               (mm_raytracing_0_mm_sdram_master_write),                                              //                          .write
		.av_writedata           (mm_raytracing_0_mm_sdram_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_read                (1'b0),                                                                               //               (terminated)
		.av_readdata            (),                                                                                   //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_instruction_master_translator (
		.clk                    (altpll_c0_clk),                                                               //                       clk.clk
		.reset                  (nios2_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (altpll_c0_clk),                                              //                      clk.clk
		.reset                  (framereader_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                                     //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (sdram_s1_address),                                           //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                                             //                         .write
		.av_read                (sdram_s1_read),                                              //                         .read
		.av_readdata            (sdram_s1_readdata),                                          //                         .readdata
		.av_writedata           (sdram_s1_writedata),                                         //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                                        //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                                     //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                                       //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                                        //                         .chipselect
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (altpll_c0_clk),                                              //                      clk.clk
		.reset                  (framereader_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),                  //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),                 //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),             //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                        //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                          //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                           //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),                       //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),                      //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),                    //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) framereader_avalon_slave_translator (
		.clk                    (altpll_c1_clk),                                             //                      clk.clk
		.reset                  (framereader_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (framereader_avalon_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (framereader_avalon_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (framereader_avalon_slave_agent_m0_read),                    //                         .read
		.uav_write              (framereader_avalon_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (framereader_avalon_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (framereader_avalon_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (framereader_avalon_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (framereader_avalon_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (framereader_avalon_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (framereader_avalon_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (framereader_avalon_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (framereader_avalon_slave_address),                          //      avalon_anti_slave_0.address
		.av_write               (framereader_avalon_slave_write),                            //                         .write
		.av_read                (framereader_avalon_slave_read),                             //                         .read
		.av_readdata            (framereader_avalon_slave_readdata),                         //                         .readdata
		.av_writedata           (framereader_avalon_slave_writedata),                        //                         .writedata
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_debug_mem_slave_translator (
		.clk                    (altpll_c0_clk),                                //                      clk.clk
		.reset                  (nios2_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_raytracing_0_mm_nios_slave_translator (
		.clk                    (altpll_c3_clk),                                          //                      clk.clk
		.reset                  (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mm_raytracing_0_mm_nios_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (mm_raytracing_0_mm_nios_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (mm_raytracing_0_mm_nios_slave_agent_m0_read),            //                         .read
		.uav_write              (mm_raytracing_0_mm_nios_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (mm_raytracing_0_mm_nios_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (mm_raytracing_0_mm_nios_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (mm_raytracing_0_mm_nios_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (mm_raytracing_0_mm_nios_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (mm_raytracing_0_mm_nios_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (mm_raytracing_0_mm_nios_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (mm_raytracing_0_mm_nios_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (mm_raytracing_0_mm_nios_slave_address),                  //      avalon_anti_slave_0.address
		.av_write               (mm_raytracing_0_mm_nios_slave_write),                    //                         .write
		.av_writedata           (mm_raytracing_0_mm_nios_slave_writedata),                //                         .writedata
		.av_read                (),                                                       //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),                   //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_pll_slave_translator (
		.clk                    (clk_50_clk_clk),                                           //                      clk.clk
		.reset                  (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (altpll_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (altpll_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (altpll_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (altpll_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (altpll_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (altpll_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (altpll_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (altpll_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (altpll_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (altpll_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (altpll_pll_slave_write),                                   //                         .write
		.av_read                (altpll_pll_slave_read),                                    //                         .read
		.av_readdata            (altpll_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (altpll_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) systimer_s1_translator (
		.clk                    (altpll_c0_clk),                                              //                      clk.clk
		.reset                  (framereader_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (systimer_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (systimer_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (systimer_s1_agent_m0_read),                                  //                         .read
		.uav_write              (systimer_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (systimer_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (systimer_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (systimer_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (systimer_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (systimer_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (systimer_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (systimer_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (systimer_s1_address),                                        //      avalon_anti_slave_0.address
		.av_write               (systimer_s1_write),                                          //                         .write
		.av_readdata            (systimer_s1_readdata),                                       //                         .readdata
		.av_writedata           (systimer_s1_writedata),                                      //                         .writedata
		.av_chipselect          (systimer_s1_chipselect),                                     //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_ram_s1_translator (
		.clk                    (altpll_c0_clk),                                              //                      clk.clk
		.reset                  (framereader_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_ram_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_ram_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (onchip_ram_s1_agent_m0_read),                                //                         .read
		.uav_write              (onchip_ram_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (onchip_ram_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (onchip_ram_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (onchip_ram_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (onchip_ram_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (onchip_ram_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (onchip_ram_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (onchip_ram_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (onchip_ram_s1_address),                                      //      avalon_anti_slave_0.address
		.av_write               (onchip_ram_s1_write),                                        //                         .write
		.av_readdata            (onchip_ram_s1_readdata),                                     //                         .readdata
		.av_writedata           (onchip_ram_s1_writedata),                                    //                         .writedata
		.av_byteenable          (onchip_ram_s1_byteenable),                                   //                         .byteenable
		.av_chipselect          (onchip_ram_s1_chipselect),                                   //                         .chipselect
		.av_clken               (onchip_ram_s1_clken),                                        //                         .clken
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) framereader_avalon_master_agent (
		.clk                   (altpll_c0_clk),                                                                //       clk.clk
		.reset                 (framereader_clock_master_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (framereader_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (framereader_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (framereader_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (framereader_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (framereader_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (framereader_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (framereader_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (framereader_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (framereader_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (framereader_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (framereader_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (framereader_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (framereader_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (framereader_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (framereader_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (framereader_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                            //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                             //          .data
		.rp_channel            (rsp_mux_src_channel),                                                          //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                      //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                            //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_data_master_agent (
		.clk                   (altpll_c0_clk),                                                        //       clk.clk
		.reset                 (nios2_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_raytracing_0_mm_sdram_master_agent (
		.clk                   (altpll_c3_clk),                                                                      //       clk.clk
		.reset                 (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_raytracing_0_mm_sdram_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_raytracing_0_mm_sdram_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_raytracing_0_mm_sdram_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_raytracing_0_mm_sdram_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_raytracing_0_mm_sdram_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_raytracing_0_mm_sdram_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_instruction_master_agent (
		.clk                   (altpll_c0_clk),                                                               //       clk.clk
		.reset                 (nios2_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (altpll_c0_clk),                                              //             clk.clk
		.reset                   (framereader_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),                       //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),                       //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),                        //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),                     //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                              //       clk.clk
		.reset             (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                                              //       clk.clk
		.reset             (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),                         //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),                        //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),                        //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),                         //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),                        //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),                        //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (altpll_c0_clk),                                                //             clk.clk
		.reset                   (framereader_clock_master_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                                //       clk.clk
		.reset             (framereader_clock_master_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                                              //       clk.clk
		.reset             (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) framereader_avalon_slave_agent (
		.clk                     (altpll_c1_clk),                                             //             clk.clk
		.reset                   (framereader_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (framereader_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (framereader_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (framereader_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (framereader_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (framereader_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (framereader_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (framereader_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (framereader_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (framereader_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (framereader_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (framereader_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (framereader_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (framereader_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (framereader_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (framereader_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (framereader_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                   //                .channel
		.rf_sink_ready           (framereader_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (framereader_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (framereader_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (framereader_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (framereader_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (framereader_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (framereader_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (framereader_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (framereader_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (framereader_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (framereader_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (framereader_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (framereader_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) framereader_avalon_slave_agent_rsp_fifo (
		.clk               (altpll_c1_clk),                                             //       clk.clk
		.reset             (framereader_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (framereader_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (framereader_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (framereader_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (framereader_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (framereader_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (framereader_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (framereader_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (framereader_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (framereader_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (framereader_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) framereader_avalon_slave_agent_rdata_fifo (
		.clk               (altpll_c1_clk),                                             //       clk.clk
		.reset             (framereader_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (framereader_avalon_slave_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (framereader_avalon_slave_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (framereader_avalon_slave_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (framereader_avalon_slave_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (framereader_avalon_slave_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (framereader_avalon_slave_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_debug_mem_slave_agent (
		.clk                     (altpll_c0_clk),                                          //             clk.clk
		.reset                   (nios2_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                //                .channel
		.rf_sink_ready           (nios2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (nios2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_debug_mem_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                          //       clk.clk
		.reset             (nios2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_debug_mem_slave_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                                    //       clk.clk
		.reset             (nios2_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mm_raytracing_0_mm_nios_slave_agent (
		.clk                     (altpll_c3_clk),                                                  //             clk.clk
		.reset                   (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (mm_raytracing_0_mm_nios_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mm_raytracing_0_mm_nios_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mm_raytracing_0_mm_nios_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mm_raytracing_0_mm_nios_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mm_raytracing_0_mm_nios_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (mm_raytracing_0_mm_nios_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mm_raytracing_0_mm_nios_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mm_raytracing_0_mm_nios_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (mm_raytracing_0_mm_nios_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mm_raytracing_0_mm_nios_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (mm_raytracing_0_mm_nios_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (mm_raytracing_0_mm_nios_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mm_raytracing_0_mm_nios_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (mm_raytracing_0_mm_nios_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (mm_raytracing_0_mm_nios_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (mm_raytracing_0_mm_nios_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                        //                .channel
		.rf_sink_ready           (mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mm_raytracing_0_mm_nios_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mm_raytracing_0_mm_nios_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mm_raytracing_0_mm_nios_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mm_raytracing_0_mm_nios_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mm_raytracing_0_mm_nios_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_raytracing_0_mm_nios_slave_agent_rsp_fifo (
		.clk               (altpll_c3_clk),                                                  //       clk.clk
		.reset             (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (mm_raytracing_0_mm_nios_slave_agent_rf_source_data),             //        in.data
		.in_valid          (mm_raytracing_0_mm_nios_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (mm_raytracing_0_mm_nios_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mm_raytracing_0_mm_nios_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mm_raytracing_0_mm_nios_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mm_raytracing_0_mm_nios_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_raytracing_0_mm_nios_slave_agent_rdata_fifo (
		.clk               (altpll_c3_clk),                                            //       clk.clk
		.reset             (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_pll_slave_agent (
		.clk                     (clk_50_clk_clk),                                           //             clk.clk
		.reset                   (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altpll_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (altpll_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (altpll_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (altpll_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (altpll_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (altpll_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (altpll_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (altpll_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (altpll_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (altpll_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (altpll_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (altpll_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (altpll_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (altpll_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (altpll_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (altpll_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                  //                .channel
		.rf_sink_ready           (altpll_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (altpll_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (altpll_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (altpll_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (altpll_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (altpll_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (altpll_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (altpll_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (altpll_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (altpll_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (altpll_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (altpll_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_pll_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                           //       clk.clk
		.reset             (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (altpll_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (altpll_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (altpll_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (altpll_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (altpll_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (altpll_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (altpll_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (altpll_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (altpll_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_pll_slave_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                           //       clk.clk
		.reset             (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (altpll_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (altpll_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (altpll_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (altpll_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (altpll_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) systimer_s1_agent (
		.clk                     (altpll_c0_clk),                                              //             clk.clk
		.reset                   (framereader_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (systimer_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (systimer_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (systimer_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (systimer_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (systimer_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (systimer_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (systimer_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (systimer_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (systimer_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (systimer_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (systimer_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (systimer_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (systimer_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (systimer_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (systimer_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (systimer_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                    //                .channel
		.rf_sink_ready           (systimer_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (systimer_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (systimer_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (systimer_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (systimer_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (systimer_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (systimer_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (systimer_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (systimer_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (systimer_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (systimer_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (systimer_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (systimer_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) systimer_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                              //       clk.clk
		.reset             (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (systimer_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (systimer_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (systimer_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (systimer_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (systimer_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (systimer_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (systimer_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (systimer_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (systimer_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (systimer_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) systimer_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                                              //       clk.clk
		.reset             (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (systimer_s1_agent_rdata_fifo_src_data),                      //        in.data
		.in_valid          (systimer_s1_agent_rdata_fifo_src_valid),                     //          .valid
		.in_ready          (systimer_s1_agent_rdata_fifo_src_ready),                     //          .ready
		.out_data          (systimer_s1_agent_rdata_fifo_out_data),                      //       out.data
		.out_valid         (systimer_s1_agent_rdata_fifo_out_valid),                     //          .valid
		.out_ready         (systimer_s1_agent_rdata_fifo_out_ready),                     //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_ram_s1_agent (
		.clk                     (altpll_c0_clk),                                              //             clk.clk
		.reset                   (framereader_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (onchip_ram_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (onchip_ram_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (onchip_ram_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (onchip_ram_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (onchip_ram_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (onchip_ram_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (onchip_ram_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (onchip_ram_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (onchip_ram_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (onchip_ram_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (onchip_ram_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (onchip_ram_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (onchip_ram_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (onchip_ram_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (onchip_ram_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (onchip_ram_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                    //                .channel
		.rf_sink_ready           (onchip_ram_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (onchip_ram_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (onchip_ram_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (onchip_ram_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (onchip_ram_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (onchip_ram_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (onchip_ram_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (onchip_ram_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (onchip_ram_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (onchip_ram_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (onchip_ram_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_ram_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (onchip_ram_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_ram_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                              //       clk.clk
		.reset             (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_ram_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (onchip_ram_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (onchip_ram_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (onchip_ram_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (onchip_ram_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (onchip_ram_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (onchip_ram_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (onchip_ram_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (onchip_ram_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (onchip_ram_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_ram_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                                              //       clk.clk
		.reset             (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_ram_s1_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (onchip_ram_s1_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (onchip_ram_s1_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (onchip_ram_s1_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (onchip_ram_s1_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (onchip_ram_s1_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	raytracing_mm_interconnect_0_router router (
		.sink_ready         (framereader_avalon_master_agent_cp_ready),                   //      sink.ready
		.sink_valid         (framereader_avalon_master_agent_cp_valid),                   //          .valid
		.sink_data          (framereader_avalon_master_agent_cp_data),                    //          .data
		.sink_startofpacket (framereader_avalon_master_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (framereader_avalon_master_agent_cp_endofpacket),             //          .endofpacket
		.clk                (altpll_c0_clk),                                              //       clk.clk
		.reset              (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                           //       src.ready
		.src_valid          (router_src_valid),                                           //          .valid
		.src_data           (router_src_data),                                            //          .data
		.src_channel        (router_src_channel),                                         //          .channel
		.src_startofpacket  (router_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                      //          .endofpacket
	);

	raytracing_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                            //       clk.clk
		.reset              (nios2_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                     //       src.ready
		.src_valid          (router_001_src_valid),                     //          .valid
		.src_data           (router_001_src_data),                      //          .data
		.src_channel        (router_001_src_channel),                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                //          .endofpacket
	);

	raytracing_mm_interconnect_0_router router_002 (
		.sink_ready         (mm_raytracing_0_mm_sdram_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_raytracing_0_mm_sdram_master_agent_cp_valid),         //          .valid
		.sink_data          (mm_raytracing_0_mm_sdram_master_agent_cp_data),          //          .data
		.sink_startofpacket (mm_raytracing_0_mm_sdram_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_raytracing_0_mm_sdram_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_c3_clk),                                          //       clk.clk
		.reset              (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                   //       src.ready
		.src_valid          (router_002_src_valid),                                   //          .valid
		.src_data           (router_002_src_data),                                    //          .data
		.src_channel        (router_002_src_channel),                                 //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                              //          .endofpacket
	);

	raytracing_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (nios2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                   //       clk.clk
		.reset              (nios2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	raytracing_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (sdram_s1_agent_rp_ready),                                    //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                                    //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                                     //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                              //          .endofpacket
		.clk                (altpll_c0_clk),                                              //       clk.clk
		.reset              (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                       //       src.ready
		.src_valid          (router_004_src_valid),                                       //          .valid
		.src_data           (router_004_src_data),                                        //          .data
		.src_channel        (router_004_src_channel),                                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                  //          .endofpacket
	);

	raytracing_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),                 //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),                 //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),                  //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),           //          .endofpacket
		.clk                (altpll_c0_clk),                                              //       clk.clk
		.reset              (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                       //       src.ready
		.src_valid          (router_005_src_valid),                                       //          .valid
		.src_data           (router_005_src_data),                                        //          .data
		.src_channel        (router_005_src_channel),                                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                  //          .endofpacket
	);

	raytracing_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (framereader_avalon_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (framereader_avalon_slave_agent_rp_valid),                   //          .valid
		.sink_data          (framereader_avalon_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (framereader_avalon_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (framereader_avalon_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (altpll_c1_clk),                                             //       clk.clk
		.reset              (framereader_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                      //       src.ready
		.src_valid          (router_006_src_valid),                                      //          .valid
		.src_data           (router_006_src_data),                                       //          .data
		.src_channel        (router_006_src_channel),                                    //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                 //          .endofpacket
	);

	raytracing_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (nios2_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                //       clk.clk
		.reset              (nios2_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	raytracing_mm_interconnect_0_router_005 router_008 (
		.sink_ready         (mm_raytracing_0_mm_nios_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (mm_raytracing_0_mm_nios_slave_agent_rp_valid),           //          .valid
		.sink_data          (mm_raytracing_0_mm_nios_slave_agent_rp_data),            //          .data
		.sink_startofpacket (mm_raytracing_0_mm_nios_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (mm_raytracing_0_mm_nios_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (altpll_c3_clk),                                          //       clk.clk
		.reset              (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                   //       src.ready
		.src_valid          (router_008_src_valid),                                   //          .valid
		.src_data           (router_008_src_data),                                    //          .data
		.src_channel        (router_008_src_channel),                                 //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                              //          .endofpacket
	);

	raytracing_mm_interconnect_0_router_005 router_009 (
		.sink_ready         (altpll_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (altpll_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (altpll_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (altpll_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (altpll_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_50_clk_clk),                                           //       clk.clk
		.reset              (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                     //       src.ready
		.src_valid          (router_009_src_valid),                                     //          .valid
		.src_data           (router_009_src_data),                                      //          .data
		.src_channel        (router_009_src_channel),                                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                //          .endofpacket
	);

	raytracing_mm_interconnect_0_router_005 router_010 (
		.sink_ready         (systimer_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (systimer_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (systimer_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (systimer_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (systimer_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (altpll_c0_clk),                                              //       clk.clk
		.reset              (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                       //       src.ready
		.src_valid          (router_010_src_valid),                                       //          .valid
		.src_data           (router_010_src_data),                                        //          .data
		.src_channel        (router_010_src_channel),                                     //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                  //          .endofpacket
	);

	raytracing_mm_interconnect_0_router_007 router_011 (
		.sink_ready         (onchip_ram_s1_agent_rp_ready),                               //      sink.ready
		.sink_valid         (onchip_ram_s1_agent_rp_valid),                               //          .valid
		.sink_data          (onchip_ram_s1_agent_rp_data),                                //          .data
		.sink_startofpacket (onchip_ram_s1_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (onchip_ram_s1_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (altpll_c0_clk),                                              //       clk.clk
		.reset              (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                       //       src.ready
		.src_valid          (router_011_src_valid),                                       //          .valid
		.src_data           (router_011_src_data),                                        //          .data
		.src_channel        (router_011_src_channel),                                     //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (8),
		.VALID_WIDTH               (8),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_data_master_limiter (
		.clk                    (altpll_c0_clk),                                   //       clk.clk
		.reset                  (nios2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                            //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                            //          .valid
		.cmd_sink_data          (router_001_src_data),                             //          .data
		.cmd_sink_channel       (router_001_src_channel),                          //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                    //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                      //          .endofpacket
		.cmd_src_ready          (nios2_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                           //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                         //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                            //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                     //          .endofpacket
		.rsp_src_ready          (nios2_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (8),
		.VALID_WIDTH               (8),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_instruction_master_limiter (
		.clk                    (altpll_c0_clk),                                          //       clk.clk
		.reset                  (nios2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                   //          .valid
		.cmd_sink_data          (router_003_src_data),                                    //          .data
		.cmd_sink_channel       (router_003_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (nios2_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (nios2_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (altpll_c0_clk),                                              //       cr0.clk
		.reset                 (framereader_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                          //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),                       //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),                        //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),                     //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket),               //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),                 //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)                        //          .ready
	);

	raytracing_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (altpll_c0_clk),                                              //       clk.clk
		.reset              (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                           //      sink.ready
		.sink_channel       (router_src_channel),                                         //          .channel
		.sink_data          (router_src_data),                                            //          .data
		.sink_startofpacket (router_src_startofpacket),                                   //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                     //          .endofpacket
		.sink_valid         (router_src_valid),                                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //          .valid
		.src0_data          (cmd_demux_src0_data),                                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                  //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (altpll_c0_clk),                                   //        clk.clk
		.reset              (nios2_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (nios2_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                        //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                        //           .valid
		.src0_data          (cmd_demux_001_src0_data),                         //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                      //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                  //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                        //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                        //           .valid
		.src1_data          (cmd_demux_001_src1_data),                         //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                      //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                  //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                        //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                        //           .valid
		.src2_data          (cmd_demux_001_src2_data),                         //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                      //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                  //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                        //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                        //           .valid
		.src3_data          (cmd_demux_001_src3_data),                         //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                      //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                  //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                        //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                        //           .valid
		.src4_data          (cmd_demux_001_src4_data),                         //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                      //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                  //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                        //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                        //           .valid
		.src5_data          (cmd_demux_001_src5_data),                         //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                      //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                  //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                        //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                        //           .valid
		.src6_data          (cmd_demux_001_src6_data),                         //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                      //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),                  //           .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                        //       src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                        //           .valid
		.src7_data          (cmd_demux_001_src7_data),                         //           .data
		.src7_channel       (cmd_demux_001_src7_channel),                      //           .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),                //           .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket)                   //           .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (altpll_c3_clk),                                          //       clk.clk
		.reset              (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                   //      sink.ready
		.sink_channel       (router_002_src_channel),                                 //          .channel
		.sink_data          (router_002_src_data),                                    //          .data
		.sink_startofpacket (router_002_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_002_src_valid),                                   //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                               //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                               //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                             //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                          //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (altpll_c0_clk),                                          //        clk.clk
		.reset              (nios2_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_003_src0_data),                                //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_003_src1_data),                                //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                          //           .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_c0_clk),                                              //       clk.clk
		.reset               (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                          //       src.ready
		.src_valid           (cmd_mux_src_valid),                                          //          .valid
		.src_data            (cmd_mux_src_data),                                           //          .data
		.src_channel         (cmd_mux_src_channel),                                        //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src0_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                   //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                 //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                    //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                             //          .endofpacket
		.sink2_ready         (crosser_003_out_ready),                                      //     sink2.ready
		.sink2_valid         (crosser_003_out_valid),                                      //          .valid
		.sink2_channel       (crosser_003_out_channel),                                    //          .channel
		.sink2_data          (crosser_003_out_data),                                       //          .data
		.sink2_startofpacket (crosser_003_out_startofpacket),                              //          .startofpacket
		.sink2_endofpacket   (crosser_003_out_endofpacket)                                 //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (altpll_c0_clk),                                              //       clk.clk
		.reset               (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                      //          .valid
		.src_data            (cmd_mux_001_src_data),                                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src1_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket)                              //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (altpll_c1_clk),                                             //       clk.clk
		.reset               (framereader_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                     //          .valid
		.src_data            (cmd_mux_002_src_data),                                      //          .data
		.src_channel         (cmd_mux_002_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                         //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                         //          .valid
		.sink0_channel       (crosser_out_channel),                                       //          .channel
		.sink0_data          (crosser_out_data),                                          //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                    //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (altpll_c0_clk),                           //       clk.clk
		.reset               (nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket)           //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (altpll_c3_clk),                                          //       clk.clk
		.reset               (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                  //          .valid
		.src_data            (cmd_mux_004_src_data),                                   //          .data
		.src_channel         (cmd_mux_004_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                  //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                  //          .valid
		.sink0_channel       (crosser_001_out_channel),                                //          .channel
		.sink0_data          (crosser_001_out_data),                                   //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                             //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (clk_50_clk_clk),                                           //       clk.clk
		.reset               (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                    //          .valid
		.src_data            (cmd_mux_005_src_data),                                     //          .data
		.src_channel         (cmd_mux_005_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                    //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                    //          .valid
		.sink0_channel       (crosser_002_out_channel),                                  //          .channel
		.sink0_data          (crosser_002_out_data),                                     //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                               //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_mux_001 cmd_mux_006 (
		.clk                 (altpll_c0_clk),                                              //       clk.clk
		.reset               (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                      //          .valid
		.src_data            (cmd_mux_006_src_data),                                       //          .data
		.src_channel         (cmd_mux_006_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)                              //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_mux_003 cmd_mux_007 (
		.clk                 (altpll_c0_clk),                                              //       clk.clk
		.reset               (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                      //          .valid
		.src_data            (cmd_mux_007_src_data),                                       //          .data
		.src_channel         (cmd_mux_007_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket),                             //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                                   //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                                   //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                                 //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                                    //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket)                              //          .endofpacket
	);

	raytracing_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (altpll_c0_clk),                                              //       clk.clk
		.reset              (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                       //      sink.ready
		.sink_channel       (router_004_src_channel),                                     //          .channel
		.sink_data          (router_004_src_data),                                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.src0_data          (rsp_demux_src0_data),                                        //          .data
		.src0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                 //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                       //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                       //          .valid
		.src1_data          (rsp_demux_src1_data),                                        //          .data
		.src1_channel       (rsp_demux_src1_channel),                                     //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                               //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                 //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                       //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                       //          .valid
		.src2_data          (rsp_demux_src2_data),                                        //          .data
		.src2_channel       (rsp_demux_src2_channel),                                     //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                               //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                  //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_demux rsp_demux_001 (
		.clk                (altpll_c0_clk),                                              //       clk.clk
		.reset              (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                       //      sink.ready
		.sink_channel       (router_005_src_channel),                                     //          .channel
		.sink_data          (router_005_src_data),                                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                              //          .endofpacket
	);

	raytracing_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (altpll_c1_clk),                                             //       clk.clk
		.reset              (framereader_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                      //      sink.ready
		.sink_channel       (router_006_src_channel),                                    //          .channel
		.sink_data          (router_006_src_data),                                       //          .data
		.sink_startofpacket (router_006_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_006_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                             //          .endofpacket
	);

	raytracing_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (altpll_c0_clk),                           //       clk.clk
		.reset              (nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)           //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_demux_002 rsp_demux_004 (
		.clk                (altpll_c3_clk),                                          //       clk.clk
		.reset              (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                   //      sink.ready
		.sink_channel       (router_008_src_channel),                                 //          .channel
		.sink_data          (router_008_src_data),                                    //          .data
		.sink_startofpacket (router_008_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_008_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                          //          .endofpacket
	);

	raytracing_mm_interconnect_0_rsp_demux_005 rsp_demux_005 (
		.clk                (clk_50_clk_clk),                                           //       clk.clk
		.reset              (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                     //      sink.ready
		.sink_channel       (router_009_src_channel),                                   //          .channel
		.sink_data          (router_009_src_data),                                      //          .data
		.sink_startofpacket (router_009_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_009_src_valid),                                     //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                            //          .endofpacket
	);

	raytracing_mm_interconnect_0_cmd_demux rsp_demux_006 (
		.clk                (altpll_c0_clk),                                              //       clk.clk
		.reset              (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                       //      sink.ready
		.sink_channel       (router_010_src_channel),                                     //          .channel
		.sink_data          (router_010_src_data),                                        //          .data
		.sink_startofpacket (router_010_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_010_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                              //          .endofpacket
	);

	raytracing_mm_interconnect_0_rsp_demux_003 rsp_demux_007 (
		.clk                (altpll_c0_clk),                                              //       clk.clk
		.reset              (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                       //      sink.ready
		.sink_channel       (router_011_src_channel),                                     //          .channel
		.sink_data          (router_011_src_data),                                        //          .data
		.sink_startofpacket (router_011_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_011_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_007_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                              //          .endofpacket
	);

	raytracing_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (altpll_c0_clk),                                              //       clk.clk
		.reset               (framereader_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                                          //          .valid
		.src_data            (rsp_mux_src_data),                                           //          .data
		.src_channel         (rsp_mux_src_channel),                                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                       //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.sink0_data          (rsp_demux_src0_data),                                        //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                  //          .endofpacket
	);

	raytracing_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (altpll_c0_clk),                           //       clk.clk
		.reset               (nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                   //          .valid
		.src_data            (rsp_mux_001_src_data),                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                  //          .channel
		.sink0_data          (rsp_demux_src1_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),              //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.sink2_ready         (crosser_005_out_ready),                   //     sink2.ready
		.sink2_valid         (crosser_005_out_valid),                   //          .valid
		.sink2_channel       (crosser_005_out_channel),                 //          .channel
		.sink2_data          (crosser_005_out_data),                    //          .data
		.sink2_startofpacket (crosser_005_out_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (crosser_005_out_endofpacket),             //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),              //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                 //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.sink4_ready         (crosser_006_out_ready),                   //     sink4.ready
		.sink4_valid         (crosser_006_out_valid),                   //          .valid
		.sink4_channel       (crosser_006_out_channel),                 //          .channel
		.sink4_data          (crosser_006_out_data),                    //          .data
		.sink4_startofpacket (crosser_006_out_startofpacket),           //          .startofpacket
		.sink4_endofpacket   (crosser_006_out_endofpacket),             //          .endofpacket
		.sink5_ready         (crosser_007_out_ready),                   //     sink5.ready
		.sink5_valid         (crosser_007_out_valid),                   //          .valid
		.sink5_channel       (crosser_007_out_channel),                 //          .channel
		.sink5_data          (crosser_007_out_data),                    //          .data
		.sink5_startofpacket (crosser_007_out_startofpacket),           //          .startofpacket
		.sink5_endofpacket   (crosser_007_out_endofpacket),             //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),              //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                 //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),              //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                 //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket)           //          .endofpacket
	);

	raytracing_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (altpll_c3_clk),                                          //       clk.clk
		.reset               (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                  //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                  //          .valid
		.src_data            (rsp_mux_002_src_data),                                   //          .data
		.src_channel         (rsp_mux_002_src_channel),                                //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                  //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                  //          .valid
		.sink0_channel       (crosser_004_out_channel),                                //          .channel
		.sink0_data          (crosser_004_out_data),                                   //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                             //          .endofpacket
	);

	raytracing_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (altpll_c0_clk),                           //       clk.clk
		.reset               (nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                   //          .valid
		.src_data            (rsp_mux_003_src_data),                    //          .data
		.src_channel         (rsp_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),                //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),                //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),              //          .channel
		.sink0_data          (rsp_demux_003_src1_data),                 //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),          //          .endofpacket
		.sink1_ready         (rsp_demux_007_src1_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_007_src1_valid),                //          .valid
		.sink1_channel       (rsp_demux_007_src1_channel),              //          .channel
		.sink1_data          (rsp_demux_007_src1_data),                 //          .data
		.sink1_startofpacket (rsp_demux_007_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_007_src1_endofpacket)           //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (altpll_c0_clk),                                             //        in_clk.clk
		.in_reset          (nios2_reset_reset_bridge_in_reset_reset),                   //  in_clk_reset.reset
		.out_clk           (altpll_c1_clk),                                             //       out_clk.clk
		.out_reset         (framereader_clock_reset_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                  //            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                                //              .channel
		.in_data           (cmd_demux_001_src2_data),                                   //              .data
		.out_ready         (crosser_out_ready),                                         //           out.ready
		.out_valid         (crosser_out_valid),                                         //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_out_channel),                                       //              .channel
		.out_data          (crosser_out_data),                                          //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (nios2_reset_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (altpll_c3_clk),                                          //       out_clk.clk
		.out_reset         (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                               //            in.ready
		.in_valid          (cmd_demux_001_src4_valid),                               //              .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),                       //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),                         //              .endofpacket
		.in_channel        (cmd_demux_001_src4_channel),                             //              .channel
		.in_data           (cmd_demux_001_src4_data),                                //              .data
		.out_ready         (crosser_001_out_ready),                                  //           out.ready
		.out_valid         (crosser_001_out_valid),                                  //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                //              .channel
		.out_data          (crosser_001_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (altpll_c0_clk),                                            //        in_clk.clk
		.in_reset          (nios2_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                           //       out_clk.clk
		.out_reset         (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src5_ready),                                 //            in.ready
		.in_valid          (cmd_demux_001_src5_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_001_src5_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src5_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_001_src5_channel),                               //              .channel
		.in_data           (cmd_demux_001_src5_data),                                  //              .data
		.out_ready         (crosser_002_out_ready),                                    //           out.ready
		.out_valid         (crosser_002_out_valid),                                    //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                  //              .channel
		.out_data          (crosser_002_out_data),                                     //              .data
		.in_empty          (1'b0),                                                     //   (terminated)
		.in_error          (1'b0),                                                     //   (terminated)
		.out_empty         (),                                                         //   (terminated)
		.out_error         ()                                                          //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (altpll_c3_clk),                                              //        in_clk.clk
		.in_reset          (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                              //       out_clk.clk
		.out_reset         (framereader_clock_master_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                   //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                                 //              .channel
		.in_data           (cmd_demux_002_src0_data),                                    //              .data
		.out_ready         (crosser_003_out_ready),                                      //           out.ready
		.out_valid         (crosser_003_out_valid),                                      //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                    //              .channel
		.out_data          (crosser_003_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (altpll_c0_clk),                                              //        in_clk.clk
		.in_reset          (framereader_clock_master_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c3_clk),                                              //       out_clk.clk
		.out_reset         (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                       //            in.ready
		.in_valid          (rsp_demux_src2_valid),                                       //              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                               //              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                                 //              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                     //              .channel
		.in_data           (rsp_demux_src2_data),                                        //              .data
		.out_ready         (crosser_004_out_ready),                                      //           out.ready
		.out_valid         (crosser_004_out_valid),                                      //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                    //              .channel
		.out_data          (crosser_004_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (altpll_c1_clk),                                             //        in_clk.clk
		.in_reset          (framereader_clock_reset_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                             //       out_clk.clk
		.out_reset         (nios2_reset_reset_bridge_in_reset_reset),                   // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                //              .channel
		.in_data           (rsp_demux_002_src0_data),                                   //              .data
		.out_ready         (crosser_005_out_ready),                                     //           out.ready
		.out_valid         (crosser_005_out_valid),                                     //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                   //              .channel
		.out_data          (crosser_005_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (altpll_c3_clk),                                          //        in_clk.clk
		.in_reset          (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (nios2_reset_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                             //              .channel
		.in_data           (rsp_demux_004_src0_data),                                //              .data
		.out_ready         (crosser_006_out_ready),                                  //           out.ready
		.out_valid         (crosser_006_out_valid),                                  //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                //              .channel
		.out_data          (crosser_006_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_50_clk_clk),                                           //        in_clk.clk
		.in_reset          (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                            //       out_clk.clk
		.out_reset         (nios2_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                 //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                                 //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                         //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                           //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                               //              .channel
		.in_data           (rsp_demux_005_src0_data),                                  //              .data
		.out_ready         (crosser_007_out_ready),                                    //           out.ready
		.out_valid         (crosser_007_out_valid),                                    //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                  //              .channel
		.out_data          (crosser_007_out_data),                                     //              .data
		.in_empty          (1'b0),                                                     //   (terminated)
		.in_error          (1'b0),                                                     //   (terminated)
		.out_empty         (),                                                         //   (terminated)
		.out_error         ()                                                          //   (terminated)
	);

	raytracing_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_c0_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (framereader_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),                         //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),                        //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                               //         .error
	);

	raytracing_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_c0_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (framereader_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                           //         .error
	);

	raytracing_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_c1_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (framereader_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (framereader_avalon_slave_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (framereader_avalon_slave_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (framereader_avalon_slave_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                          //         .error
	);

	raytracing_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                 //         .error
	);

	raytracing_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (altpll_c3_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (mm_raytracing_0_reset_sink_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (mm_raytracing_0_mm_nios_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                         //         .error
	);

	raytracing_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_50_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (altpll_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (altpll_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (altpll_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                         //         .error
	);

	raytracing_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (altpll_c0_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (framereader_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (systimer_s1_agent_rdata_fifo_out_data),                      //     in_0.data
		.in_0_valid     (systimer_s1_agent_rdata_fifo_out_valid),                     //         .valid
		.in_0_ready     (systimer_s1_agent_rdata_fifo_out_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                           //         .error
	);

	raytracing_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_c0_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (framereader_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_ram_s1_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (onchip_ram_s1_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (onchip_ram_s1_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                           //         .error
	);

endmodule
